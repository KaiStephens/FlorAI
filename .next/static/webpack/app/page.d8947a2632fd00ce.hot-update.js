"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/PlanetScene.tsx":
/*!****************************************!*\
  !*** ./src/components/PlanetScene.tsx ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ PlanetScene; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.module.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\nfunction PlanetScene() {\n    _s();\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!containerRef.current) return;\n        // Scene setup\n        const scene = new three__WEBPACK_IMPORTED_MODULE_2__.Scene();\n        // Add fog for depth\n        scene.fog = new three__WEBPACK_IMPORTED_MODULE_2__.FogExp2(0x000511, 0.01);\n        // Use a wider field of view to capture more of the scene\n        const camera = new three__WEBPACK_IMPORTED_MODULE_2__.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 1000);\n        // Enhanced renderer with better shadows\n        const renderer = new three__WEBPACK_IMPORTED_MODULE_2__.WebGLRenderer({\n            antialias: true,\n            alpha: true\n        });\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.setClearColor(0x000511);\n        renderer.toneMapping = three__WEBPACK_IMPORTED_MODULE_2__.ACESFilmicToneMapping;\n        renderer.toneMappingExposure = 1.2;\n        containerRef.current.appendChild(renderer.domElement);\n        // Enhanced Lighting\n        const ambientLight = new three__WEBPACK_IMPORTED_MODULE_2__.AmbientLight(0xffffff, 0.8);\n        scene.add(ambientLight);\n        const pointLight = new three__WEBPACK_IMPORTED_MODULE_2__.PointLight(0xffffff, 2);\n        pointLight.position.set(25, 5, 15); // Position light to illuminate planet from right\n        scene.add(pointLight);\n        // Add a second point light for better illumination\n        const pointLight2 = new three__WEBPACK_IMPORTED_MODULE_2__.PointLight(0xc4f1de, 1.5);\n        pointLight2.position.set(-10, -5, -5);\n        scene.add(pointLight2);\n        // Create stars - simple and spread throughout the scene\n        const createStarField = ()=>{\n            const starCount = 3000;\n            const geometry = new three__WEBPACK_IMPORTED_MODULE_2__.BufferGeometry();\n            const positions = new Float32Array(starCount * 3);\n            // Create stars with a wider distribution\n            for(let i = 0; i < starCount; i++){\n                // Distribute stars in a cube formation that extends well beyond the camera view\n                positions[i * 3] = (Math.random() - 0.5) * 200;\n                positions[i * 3 + 1] = (Math.random() - 0.5) * 200;\n                positions[i * 3 + 2] = (Math.random() - 0.5) * 200;\n            }\n            geometry.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_2__.BufferAttribute(positions, 3));\n            // Use a single star size instead of different sizes\n            const material = new three__WEBPACK_IMPORTED_MODULE_2__.PointsMaterial({\n                color: 0xffffff,\n                size: 0.2,\n                transparent: true,\n                opacity: 0.8\n            });\n            const stars = new three__WEBPACK_IMPORTED_MODULE_2__.Points(geometry, material);\n            scene.add(stars);\n            return [\n                stars\n            ]; // Return as an array to maintain compatibility with animation code\n        };\n        const starGroups = createStarField();\n        // Create planet (on the right side)\n        const planetGeometry = new three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry(12, 64, 64);\n        const planetMaterial = new three__WEBPACK_IMPORTED_MODULE_2__.MeshPhongMaterial({\n            map: new three__WEBPACK_IMPORTED_MODULE_2__.TextureLoader().load(\"https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/planets/earth_atmos_2048.jpg\"),\n            bumpMap: new three__WEBPACK_IMPORTED_MODULE_2__.TextureLoader().load(\"https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/planets/earth_normal_2048.jpg\"),\n            bumpScale: 0.05,\n            specularMap: new three__WEBPACK_IMPORTED_MODULE_2__.TextureLoader().load(\"https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/planets/earth_specular_2048.jpg\"),\n            specular: new three__WEBPACK_IMPORTED_MODULE_2__.Color(\"grey\"),\n            shininess: 15\n        });\n        const planet = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(planetGeometry, planetMaterial);\n        scene.add(planet);\n        // Add plant-like atmosphere\n        const atmosphereGeometry = new three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry(12.4, 64, 64);\n        const atmosphereMaterial = new three__WEBPACK_IMPORTED_MODULE_2__.ShaderMaterial({\n            transparent: true,\n            side: three__WEBPACK_IMPORTED_MODULE_2__.BackSide,\n            vertexShader: \"\\n                varying vec3 vNormal;\\n                void main() {\\n                    vNormal = normalize(normalMatrix * normal);\\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n                }\\n            \",\n            fragmentShader: \"\\n                varying vec3 vNormal;\\n                void main() {\\n                    float intensity = pow(0.7 - dot(vNormal, vec3(0.0, 0.0, 1.0)), 2.0);\\n                    gl_FragColor = vec4(0.4, 0.8, 0.4, 1.0) * intensity;\\n                }\\n            \"\n        });\n        const atmosphere = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(atmosphereGeometry, atmosphereMaterial);\n        scene.add(atmosphere);\n        // Camera position - adjusted for the much larger and further-right planet\n        camera.position.set(-20, 0, 25);\n        // Look at a point much further to the right\n        camera.lookAt(new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(60, 0, 0));\n        // Animation\n        // Track target positions for smoother interpolation\n        let targetX = 20;\n        let targetZ = 30;\n        const interpolationSpeed = 0.05; // Controls smoothness of transitions\n        function animate() {\n            requestAnimationFrame(animate);\n            // Smoothly interpolate current position toward target position\n            const currentX = planet.position.x;\n            const currentZ = planet.position.z;\n            // Interpolate X position (right movement)\n            if (Math.abs(targetX - currentX) > 0.01) {\n                planet.position.x += (targetX - currentX) * interpolationSpeed;\n            }\n            // Interpolate Z position (distance)\n            if (Math.abs(targetZ - currentZ) > 0.01) {\n                planet.position.z += (targetZ - currentZ) * interpolationSpeed;\n            }\n            // Keep atmosphere with planet\n            atmosphere.position.copy(planet.position);\n            // Rotate star fields slightly for subtle movement\n            starGroups.forEach((stars, i)=>{\n                stars.rotation.y += 0.0001 * (i + 1);\n                stars.rotation.x += 0.00005 * (i + 1);\n            });\n            renderer.render(scene, camera);\n        }\n        // Handle wheel events for rotation - this is more direct than scroll\n        const handleWheel = (event)=>{\n            // Determine direction and force of wheel event\n            const delta = event.deltaY;\n            // Apply rotation directly to the planet\n            planet.rotation.y += delta * 0.002;\n            atmosphere.rotation.y = planet.rotation.y;\n            // Check scroll direction\n            if (delta > 0) {\n                // Scrolling down - move planet closer (decrease z) - faster\n                if (targetZ > 0) {\n                    // Decrease z proportional to rotation amount but always moving forward\n                    const zDelta = Math.abs(delta) * 0.03; // Increased from 0.01 to 0.03\n                    targetZ = Math.max(0, targetZ - zDelta);\n                }\n            } else if (delta < 0) {\n                // Scrolling up - move planet farther (increase z)\n                if (targetZ < 30) {\n                    // Increase z proportional to rotation amount\n                    const zDelta = Math.abs(delta) * 0.03; // Increased from 0.01 to 0.03\n                    targetZ = Math.min(30, targetZ + zDelta);\n                }\n            }\n        };\n        // Track touch position for mobile devices\n        let touchStartY = 0;\n        // Handle touch events for mobile\n        const handleTouchStart = (event)=>{\n            touchStartY = event.touches[0].clientY;\n        };\n        const handleTouchMove = (event)=>{\n            // Skip if no starting position\n            if (touchStartY === 0) return;\n            // Calculate delta (negative to match wheel direction)\n            const touchDelta = -(event.touches[0].clientY - touchStartY) * 10;\n            // Apply rotation just like with wheel events\n            planet.rotation.y += touchDelta * 0.002;\n            atmosphere.rotation.y = planet.rotation.y;\n            // Check scroll direction\n            if (touchDelta > 0) {\n                // Scrolling down - move planet closer (decrease z)\n                if (targetZ > 0) {\n                    // Decrease z proportional to rotation amount\n                    const zDelta = Math.abs(touchDelta) * 0.03; // Increased from 0.01 to 0.03\n                    targetZ = Math.max(0, targetZ - zDelta);\n                }\n            } else if (touchDelta < 0) {\n                // Scrolling up - move planet farther (increase z)\n                if (targetZ < 30) {\n                    // Increase z proportional to rotation amount\n                    const zDelta = Math.abs(touchDelta) * 0.03; // Increased from 0.01 to 0.03\n                    targetZ = Math.min(30, targetZ + zDelta);\n                }\n            }\n            // Update start position\n            touchStartY = event.touches[0].clientY;\n        };\n        const handleTouchEnd = ()=>{\n            touchStartY = 0;\n        };\n        // Handle scroll events to update planet position\n        const handleScroll = ()=>{\n            // Get current scroll position as percentage of page height\n            const scrollHeight = document.documentElement.scrollHeight - window.innerHeight;\n            const scrollTop = window.scrollY || document.documentElement.scrollTop;\n            const scrollPercent = Math.min(scrollTop / scrollHeight, 1);\n            // Calculate x-position: 20 at top of page, gradually increasing to 100 as we scroll\n            let xPos = 20;\n            if (scrollPercent > 0.1) {\n                // Map 10%-30% scroll to full x-position change (20 to 100) - much faster\n                // Decreased from 0.4 to 0.2 to make it move even faster\n                const xScrollPercent = Math.min((scrollPercent - 0.1) / 0.2, 1);\n                xPos = 20 + 80 * xScrollPercent; // Move from 20 to 100\n            }\n            // Update target X position - actual movement happens in animation loop\n            targetX = xPos;\n        };\n        // Handle window resize\n        const handleResize = ()=>{\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n            // Update planet position on resize too\n            handleScroll();\n        };\n        window.addEventListener(\"resize\", handleResize);\n        window.addEventListener(\"scroll\", handleScroll, {\n            passive: true\n        });\n        // Add wheel event listener to the container\n        window.addEventListener(\"wheel\", handleWheel, {\n            passive: true\n        });\n        // Add touch events for mobile\n        window.addEventListener(\"touchstart\", handleTouchStart, {\n            passive: true\n        });\n        window.addEventListener(\"touchmove\", handleTouchMove, {\n            passive: true\n        });\n        window.addEventListener(\"touchend\", handleTouchEnd, {\n            passive: true\n        });\n        // Initial rotation so Earth is visible\n        planet.rotation.y = 0.5;\n        atmosphere.rotation.y = 0.5;\n        // Set initial target positions (actual planet movement will be done smoothly in animation loop)\n        targetX = 20;\n        targetZ = 30;\n        planet.position.set(20, 0, 30); // Set initial position to match targets\n        atmosphere.position.copy(planet.position);\n        // Start animation\n        animate();\n        // Create an IntersectionObserver to rotate the planet when page sections come into view\n        // This provides a backup method in case wheel events don't work well\n        setTimeout(()=>{\n            const sections = document.querySelectorAll(\"section\");\n            if (sections.length > 0) {\n                let currentSectionIndex = 0;\n                // Track target rotation for smoother transitions\n                let targetRotationY = planet.rotation.y;\n                const sectionObserver = new IntersectionObserver((entries)=>{\n                    entries.forEach((entry)=>{\n                        if (entry.isIntersecting) {\n                            // Get the section index\n                            const section = entry.target;\n                            const index = Array.from(sections).indexOf(section);\n                            // Determine rotation based on section index\n                            // Ensure we only rotate if we're moving to a new section\n                            if (index !== currentSectionIndex) {\n                                // Set target rotation - actual rotation will happen smoothly in animation loop\n                                targetRotationY = Math.PI / 2 * index;\n                                currentSectionIndex = index;\n                            }\n                        }\n                    });\n                }, {\n                    threshold: 0.3\n                }); // Trigger when 30% of section is visible\n                // Add rotation interpolation to animation loop\n                const originalAnimate = animate;\n                animate = function() {\n                    // Smoothly interpolate rotation toward target\n                    const rotationDelta = targetRotationY - planet.rotation.y;\n                    if (Math.abs(rotationDelta) > 0.01) {\n                        planet.rotation.y += rotationDelta * 0.05;\n                        atmosphere.rotation.y = planet.rotation.y;\n                    }\n                    // Call original animation function\n                    originalAnimate();\n                };\n                // Observe all sections\n                sections.forEach((section)=>{\n                    sectionObserver.observe(section);\n                });\n            }\n        }, 1000); // Wait for sections to be ready\n        // Cleanup\n        return ()=>{\n            var _containerRef_current;\n            window.removeEventListener(\"resize\", handleResize);\n            window.removeEventListener(\"wheel\", handleWheel);\n            window.removeEventListener(\"touchstart\", handleTouchStart);\n            window.removeEventListener(\"touchmove\", handleTouchMove);\n            window.removeEventListener(\"touchend\", handleTouchEnd);\n            (_containerRef_current = containerRef.current) === null || _containerRef_current === void 0 ? void 0 : _containerRef_current.removeChild(renderer.domElement);\n            renderer.dispose();\n        };\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: containerRef,\n        style: {\n            position: \"fixed\",\n            top: 0,\n            left: 0,\n            width: \"100%\",\n            height: \"100%\",\n            zIndex: 1\n        }\n    }, void 0, false, {\n        fileName: \"/Users/kaistephens/Downloads/code/florAI/webApp/FlorAI/src/components/PlanetScene.tsx\",\n        lineNumber: 340,\n        columnNumber: 9\n    }, this);\n}\n_s(PlanetScene, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c = PlanetScene;\nvar _c;\n$RefreshReg$(_c, \"PlanetScene\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL1BsYW5ldFNjZW5lLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBRTBDO0FBQ1g7QUFHaEIsU0FBU0c7O0lBQ3BCLE1BQU1DLGVBQWVILDZDQUFNQSxDQUFpQjtJQUU1Q0QsZ0RBQVNBLENBQUM7UUFDTixJQUFJLENBQUNJLGFBQWFDLE9BQU8sRUFBRTtRQUUzQixjQUFjO1FBQ2QsTUFBTUMsUUFBUSxJQUFJSix3Q0FBVztRQUU3QixvQkFBb0I7UUFDcEJJLE1BQU1FLEdBQUcsR0FBRyxJQUFJTiwwQ0FBYSxDQUFDLFVBQVU7UUFFeEMseURBQXlEO1FBQ3pELE1BQU1RLFNBQVMsSUFBSVIsb0RBQXVCLENBQUMsSUFBSVUsT0FBT0MsVUFBVSxHQUFHRCxPQUFPRSxXQUFXLEVBQUUsS0FBSztRQUU1Rix3Q0FBd0M7UUFDeEMsTUFBTUMsV0FBVyxJQUFJYixnREFBbUIsQ0FBQztZQUNyQ2UsV0FBVztZQUNYQyxPQUFPO1FBQ1g7UUFDQUgsU0FBU0ksT0FBTyxDQUFDUCxPQUFPQyxVQUFVLEVBQUVELE9BQU9FLFdBQVc7UUFDdERDLFNBQVNLLGFBQWEsQ0FBQztRQUN2QkwsU0FBU00sV0FBVyxHQUFHbkIsd0RBQTJCO1FBQ2xEYSxTQUFTUSxtQkFBbUIsR0FBRztRQUMvQm5CLGFBQWFDLE9BQU8sQ0FBQ21CLFdBQVcsQ0FBQ1QsU0FBU1UsVUFBVTtRQUVwRCxvQkFBb0I7UUFDcEIsTUFBTUMsZUFBZSxJQUFJeEIsK0NBQWtCLENBQUMsVUFBVTtRQUN0REksTUFBTXNCLEdBQUcsQ0FBQ0Y7UUFFVixNQUFNRyxhQUFhLElBQUkzQiw2Q0FBZ0IsQ0FBQyxVQUFVO1FBQ2xEMkIsV0FBV0UsUUFBUSxDQUFDQyxHQUFHLENBQUMsSUFBSSxHQUFHLEtBQUssaURBQWlEO1FBQ3JGMUIsTUFBTXNCLEdBQUcsQ0FBQ0M7UUFFVixtREFBbUQ7UUFDbkQsTUFBTUksY0FBYyxJQUFJL0IsNkNBQWdCLENBQUMsVUFB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WjtHQXpWd0J2SjtLQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvY29tcG9uZW50cy9QbGFuZXRTY2VuZS50c3g/OWExNiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCc7XG5cbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgT3JiaXRDb250cm9scyB9IGZyb20gJ3RocmVlL2V4YW1wbGVzL2pzbS9jb250cm9scy9PcmJpdENvbnRyb2xzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUGxhbmV0U2NlbmUoKSB7XG4gICAgY29uc3QgY29udGFpbmVyUmVmID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50PihudWxsKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICghY29udGFpbmVyUmVmLmN1cnJlbnQpIHJldHVybjtcblxuICAgICAgICAvLyBTY2VuZSBzZXR1cFxuICAgICAgICBjb25zdCBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xuICAgICAgICBcbiAgICAgICAgLy8gQWRkIGZvZyBmb3IgZGVwdGhcbiAgICAgICAgc2NlbmUuZm9nID0gbmV3IFRIUkVFLkZvZ0V4cDIoMHgwMDA1MTEsIDAuMDEpO1xuICAgICAgICBcbiAgICAgICAgLy8gVXNlIGEgd2lkZXIgZmllbGQgb2YgdmlldyB0byBjYXB0dXJlIG1vcmUgb2YgdGhlIHNjZW5lXG4gICAgICAgIGNvbnN0IGNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSg2MCwgd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQsIDAuMSwgMTAwMCk7XG4gICAgICAgIFxuICAgICAgICAvLyBFbmhhbmNlZCByZW5kZXJlciB3aXRoIGJldHRlciBzaGFkb3dzXG4gICAgICAgIGNvbnN0IHJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoeyBcbiAgICAgICAgICAgIGFudGlhbGlhczogdHJ1ZSxcbiAgICAgICAgICAgIGFscGhhOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgICAgcmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcbiAgICAgICAgcmVuZGVyZXIuc2V0Q2xlYXJDb2xvcigweDAwMDUxMSk7XG4gICAgICAgIHJlbmRlcmVyLnRvbmVNYXBwaW5nID0gVEhSRUUuQUNFU0ZpbG1pY1RvbmVNYXBwaW5nO1xuICAgICAgICByZW5kZXJlci50b25lTWFwcGluZ0V4cG9zdXJlID0gMS4yO1xuICAgICAgICBjb250YWluZXJSZWYuY3VycmVudC5hcHBlbmRDaGlsZChyZW5kZXJlci5kb21FbGVtZW50KTtcblxuICAgICAgICAvLyBFbmhhbmNlZCBMaWdodGluZ1xuICAgICAgICBjb25zdCBhbWJpZW50TGlnaHQgPSBuZXcgVEhSRUUuQW1iaWVudExpZ2h0KDB4ZmZmZmZmLCAwLjgpO1xuICAgICAgICBzY2VuZS5hZGQoYW1iaWVudExpZ2h0KTtcblxuICAgICAgICBjb25zdCBwb2ludExpZ2h0ID0gbmV3IFRIUkVFLlBvaW50TGlnaHQoMHhmZmZmZmYsIDIpO1xuICAgICAgICBwb2ludExpZ2h0LnBvc2l0aW9uLnNldCgyNSwgNSwgMTUpOyAvLyBQb3NpdGlvbiBsaWdodCB0byBpbGx1bWluYXRlIHBsYW5ldCBmcm9tIHJpZ2h0XG4gICAgICAgIHNjZW5lLmFkZChwb2ludExpZ2h0KTtcblxuICAgICAgICAvLyBBZGQgYSBzZWNvbmQgcG9pbnQgbGlnaHQgZm9yIGJldHRlciBpbGx1bWluYXRpb25cbiAgICAgICAgY29uc3QgcG9pbnRMaWdodDIgPSBuZXcgVEhSRUUuUG9pbnRMaWdodCgweGM0ZjFkZSwgMS41KTtcbiAgICAgICAgcG9pbnRMaWdodDIucG9zaXRpb24uc2V0KC0xMCwgLTUsIC01KTtcbiAgICAgICAgc2NlbmUuYWRkKHBvaW50TGlnaHQyKTtcblxuICAgICAgICAvLyBDcmVhdGUgc3RhcnMgLSBzaW1wbGUgYW5kIHNwcmVhZCB0aHJvdWdob3V0IHRoZSBzY2VuZVxuICAgICAgICBjb25zdCBjcmVhdGVTdGFyRmllbGQgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzdGFyQ291bnQgPSAzMDAwO1xuICAgICAgICAgICAgY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnkoKTtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkoc3RhckNvdW50ICogMyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENyZWF0ZSBzdGFycyB3aXRoIGEgd2lkZXIgZGlzdHJpYnV0aW9uXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0YXJDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgLy8gRGlzdHJpYnV0ZSBzdGFycyBpbiBhIGN1YmUgZm9ybWF0aW9uIHRoYXQgZXh0ZW5kcyB3ZWxsIGJleW9uZCB0aGUgY2FtZXJhIHZpZXdcbiAgICAgICAgICAgICAgICBwb3NpdGlvbnNbaSAqIDNdID0gKE1hdGgucmFuZG9tKCkgLSAwLjUpICogMjAwO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uc1tpICogMyArIDFdID0gKE1hdGgucmFuZG9tKCkgLSAwLjUpICogMjAwO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uc1tpICogMyArIDJdID0gKE1hdGgucmFuZG9tKCkgLSAwLjUpICogMjAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShwb3NpdGlvbnMsIDMpKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gVXNlIGEgc2luZ2xlIHN0YXIgc2l6ZSBpbnN0ZWFkIG9mIGRpZmZlcmVudCBzaXplc1xuICAgICAgICAgICAgY29uc3QgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuUG9pbnRzTWF0ZXJpYWwoeyBcbiAgICAgICAgICAgICAgICBjb2xvcjogMHhmZmZmZmYsIFxuICAgICAgICAgICAgICAgIHNpemU6IDAuMiwgLy8gU21hbGxlciwgZXF1YWwtc2l6ZWQgc3RhcnNcbiAgICAgICAgICAgICAgICB0cmFuc3BhcmVudDogdHJ1ZSwgXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMC44IFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHN0YXJzID0gbmV3IFRIUkVFLlBvaW50cyhnZW9tZXRyeSwgbWF0ZXJpYWwpO1xuICAgICAgICAgICAgc2NlbmUuYWRkKHN0YXJzKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIFtzdGFyc107IC8vIFJldHVybiBhcyBhbiBhcnJheSB0byBtYWludGFpbiBjb21wYXRpYmlsaXR5IHdpdGggYW5pbWF0aW9uIGNvZGVcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHN0YXJHcm91cHMgPSBjcmVhdGVTdGFyRmllbGQoKTtcblxuICAgICAgICAvLyBDcmVhdGUgcGxhbmV0IChvbiB0aGUgcmlnaHQgc2lkZSlcbiAgICAgICAgY29uc3QgcGxhbmV0R2VvbWV0cnkgPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoMTIsIDY0LCA2NCk7XG4gICAgICAgIGNvbnN0IHBsYW5ldE1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHtcbiAgICAgICAgICAgIG1hcDogbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoKS5sb2FkKCdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vbXJkb29iL3RocmVlLmpzL2Rldi9leGFtcGxlcy90ZXh0dXJlcy9wbGFuZXRzL2VhcnRoX2F0bW9zXzIwNDguanBnJyksXG4gICAgICAgICAgICBidW1wTWFwOiBuZXcgVEhSRUUuVGV4dHVyZUxvYWRlcigpLmxvYWQoJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9tcmRvb2IvdGhyZWUuanMvZGV2L2V4YW1wbGVzL3RleHR1cmVzL3BsYW5ldHMvZWFydGhfbm9ybWFsXzIwNDguanBnJyksXG4gICAgICAgICAgICBidW1wU2NhbGU6IDAuMDUsXG4gICAgICAgICAgICBzcGVjdWxhck1hcDogbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoKS5sb2FkKCdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vbXJkb29iL3RocmVlLmpzL2Rldi9leGFtcGxlcy90ZXh0dXJlcy9wbGFuZXRzL2VhcnRoX3NwZWN1bGFyXzIwNDguanBnJyksXG4gICAgICAgICAgICBzcGVjdWxhcjogbmV3IFRIUkVFLkNvbG9yKCdncmV5JyksXG4gICAgICAgICAgICBzaGluaW5lc3M6IDE1XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBwbGFuZXQgPSBuZXcgVEhSRUUuTWVzaChwbGFuZXRHZW9tZXRyeSwgcGxhbmV0TWF0ZXJpYWwpO1xuICAgICAgICBzY2VuZS5hZGQocGxhbmV0KTtcblxuICAgICAgICAvLyBBZGQgcGxhbnQtbGlrZSBhdG1vc3BoZXJlXG4gICAgICAgIGNvbnN0IGF0bW9zcGhlcmVHZW9tZXRyeSA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeSgxMi40LCA2NCwgNjQpO1xuICAgICAgICBjb25zdCBhdG1vc3BoZXJlTWF0ZXJpYWwgPSBuZXcgVEhSRUUuU2hhZGVyTWF0ZXJpYWwoe1xuICAgICAgICAgICAgdHJhbnNwYXJlbnQ6IHRydWUsXG4gICAgICAgICAgICBzaWRlOiBUSFJFRS5CYWNrU2lkZSxcbiAgICAgICAgICAgIHZlcnRleFNoYWRlcjogYFxuICAgICAgICAgICAgICAgIHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xuICAgICAgICAgICAgICAgIHZvaWQgbWFpbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdk5vcm1hbCA9IG5vcm1hbGl6ZShub3JtYWxNYXRyaXggKiBub3JtYWwpO1xuICAgICAgICAgICAgICAgICAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KHBvc2l0aW9uLCAxLjApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGAsXG4gICAgICAgICAgICBmcmFnbWVudFNoYWRlcjogYFxuICAgICAgICAgICAgICAgIHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xuICAgICAgICAgICAgICAgIHZvaWQgbWFpbigpIHtcbiAgICAgICAgICAgICAgICAgICAgZmxvYXQgaW50ZW5zaXR5ID0gcG93KDAuNyAtIGRvdCh2Tm9ybWFsLCB2ZWMzKDAuMCwgMC4wLCAxLjApKSwgMi4wKTtcbiAgICAgICAgICAgICAgICAgICAgZ2xfRnJhZ0NvbG9yID0gdmVjNCgwLjQsIDAuOCwgMC40LCAxLjApICogaW50ZW5zaXR5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGBcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGF0bW9zcGhlcmUgPSBuZXcgVEhSRUUuTWVzaChhdG1vc3BoZXJlR2VvbWV0cnksIGF0bW9zcGhlcmVNYXRlcmlhbCk7XG4gICAgICAgIHNjZW5lLmFkZChhdG1vc3BoZXJlKTtcblxuICAgICAgICAvLyBDYW1lcmEgcG9zaXRpb24gLSBhZGp1c3RlZCBmb3IgdGhlIG11Y2ggbGFyZ2VyIGFuZCBmdXJ0aGVyLXJpZ2h0IHBsYW5ldFxuICAgICAgICBjYW1lcmEucG9zaXRpb24uc2V0KC0yMCwgMCwgMjUpO1xuICAgICAgICAvLyBMb29rIGF0IGEgcG9pbnQgbXVjaCBmdXJ0aGVyIHRvIHRoZSByaWdodFxuICAgICAgICBjYW1lcmEubG9va0F0KG5ldyBUSFJFRS5WZWN0b3IzKDYwLCAwLCAwKSk7XG5cbiAgICAgICAgLy8gQW5pbWF0aW9uXG4gICAgICAgIC8vIFRyYWNrIHRhcmdldCBwb3NpdGlvbnMgZm9yIHNtb290aGVyIGludGVycG9sYXRpb25cbiAgICAgICAgbGV0IHRhcmdldFggPSAyMDtcbiAgICAgICAgbGV0IHRhcmdldFogPSAzMDtcbiAgICAgICAgY29uc3QgaW50ZXJwb2xhdGlvblNwZWVkID0gMC4wNTsgLy8gQ29udHJvbHMgc21vb3RobmVzcyBvZiB0cmFuc2l0aW9uc1xuICAgICAgICBcbiAgICAgICAgZnVuY3Rpb24gYW5pbWF0ZSgpIHtcbiAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gU21vb3RobHkgaW50ZXJwb2xhdGUgY3VycmVudCBwb3NpdGlvbiB0b3dhcmQgdGFyZ2V0IHBvc2l0aW9uXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50WCA9IHBsYW5ldC5wb3NpdGlvbi54O1xuICAgICAgICAgICAgY29uc3QgY3VycmVudFogPSBwbGFuZXQucG9zaXRpb24uejtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gSW50ZXJwb2xhdGUgWCBwb3NpdGlvbiAocmlnaHQgbW92ZW1lbnQpXG4gICAgICAgICAgICBpZiAoTWF0aC5hYnModGFyZ2V0WCAtIGN1cnJlbnRYKSA+IDAuMDEpIHtcbiAgICAgICAgICAgICAgICBwbGFuZXQucG9zaXRpb24ueCArPSAodGFyZ2V0WCAtIGN1cnJlbnRYKSAqIGludGVycG9sYXRpb25TcGVlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gSW50ZXJwb2xhdGUgWiBwb3NpdGlvbiAoZGlzdGFuY2UpXG4gICAgICAgICAgICBpZiAoTWF0aC5hYnModGFyZ2V0WiAtIGN1cnJlbnRaKSA+IDAuMDEpIHtcbiAgICAgICAgICAgICAgICBwbGFuZXQucG9zaXRpb24ueiArPSAodGFyZ2V0WiAtIGN1cnJlbnRaKSAqIGludGVycG9sYXRpb25TcGVlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gS2VlcCBhdG1vc3BoZXJlIHdpdGggcGxhbmV0XG4gICAgICAgICAgICBhdG1vc3BoZXJlLnBvc2l0aW9uLmNvcHkocGxhbmV0LnBvc2l0aW9uKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gUm90YXRlIHN0YXIgZmllbGRzIHNsaWdodGx5IGZvciBzdWJ0bGUgbW92ZW1lbnRcbiAgICAgICAgICAgIHN0YXJHcm91cHMuZm9yRWFjaCgoc3RhcnMsIGkpID0+IHtcbiAgICAgICAgICAgICAgICBzdGFycy5yb3RhdGlvbi55ICs9IDAuMDAwMSAqIChpICsgMSk7XG4gICAgICAgICAgICAgICAgc3RhcnMucm90YXRpb24ueCArPSAwLjAwMDA1ICogKGkgKyAxKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZW5kZXJlci5yZW5kZXIoc2NlbmUsIGNhbWVyYSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEhhbmRsZSB3aGVlbCBldmVudHMgZm9yIHJvdGF0aW9uIC0gdGhpcyBpcyBtb3JlIGRpcmVjdCB0aGFuIHNjcm9sbFxuICAgICAgICBjb25zdCBoYW5kbGVXaGVlbCA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIGRpcmVjdGlvbiBhbmQgZm9yY2Ugb2Ygd2hlZWwgZXZlbnRcbiAgICAgICAgICAgIGNvbnN0IGRlbHRhID0gZXZlbnQuZGVsdGFZO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBBcHBseSByb3RhdGlvbiBkaXJlY3RseSB0byB0aGUgcGxhbmV0XG4gICAgICAgICAgICBwbGFuZXQucm90YXRpb24ueSArPSBkZWx0YSAqIDAuMDAyO1xuICAgICAgICAgICAgYXRtb3NwaGVyZS5yb3RhdGlvbi55ID0gcGxhbmV0LnJvdGF0aW9uLnk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENoZWNrIHNjcm9sbCBkaXJlY3Rpb25cbiAgICAgICAgICAgIGlmIChkZWx0YSA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBTY3JvbGxpbmcgZG93biAtIG1vdmUgcGxhbmV0IGNsb3NlciAoZGVjcmVhc2UgeikgLSBmYXN0ZXJcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0WiA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRGVjcmVhc2UgeiBwcm9wb3J0aW9uYWwgdG8gcm90YXRpb24gYW1vdW50IGJ1dCBhbHdheXMgbW92aW5nIGZvcndhcmRcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgekRlbHRhID0gTWF0aC5hYnMoZGVsdGEpICogMC4wMzsgLy8gSW5jcmVhc2VkIGZyb20gMC4wMSB0byAwLjAzXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFogPSBNYXRoLm1heCgwLCB0YXJnZXRaIC0gekRlbHRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRlbHRhIDwgMCkge1xuICAgICAgICAgICAgICAgIC8vIFNjcm9sbGluZyB1cCAtIG1vdmUgcGxhbmV0IGZhcnRoZXIgKGluY3JlYXNlIHopXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldFogPCAzMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJbmNyZWFzZSB6IHByb3BvcnRpb25hbCB0byByb3RhdGlvbiBhbW91bnRcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgekRlbHRhID0gTWF0aC5hYnMoZGVsdGEpICogMC4wMzsgLy8gSW5jcmVhc2VkIGZyb20gMC4wMSB0byAwLjAzXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFogPSBNYXRoLm1pbigzMCwgdGFyZ2V0WiArIHpEZWx0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgLy8gVHJhY2sgdG91Y2ggcG9zaXRpb24gZm9yIG1vYmlsZSBkZXZpY2VzXG4gICAgICAgIGxldCB0b3VjaFN0YXJ0WSA9IDA7XG4gICAgICAgIFxuICAgICAgICAvLyBIYW5kbGUgdG91Y2ggZXZlbnRzIGZvciBtb2JpbGVcbiAgICAgICAgY29uc3QgaGFuZGxlVG91Y2hTdGFydCA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgdG91Y2hTdGFydFkgPSBldmVudC50b3VjaGVzWzBdLmNsaWVudFk7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICBjb25zdCBoYW5kbGVUb3VjaE1vdmUgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIC8vIFNraXAgaWYgbm8gc3RhcnRpbmcgcG9zaXRpb25cbiAgICAgICAgICAgIGlmICh0b3VjaFN0YXJ0WSA9PT0gMCkgcmV0dXJuO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgZGVsdGEgKG5lZ2F0aXZlIHRvIG1hdGNoIHdoZWVsIGRpcmVjdGlvbilcbiAgICAgICAgICAgIGNvbnN0IHRvdWNoRGVsdGEgPSAtKGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WSAtIHRvdWNoU3RhcnRZKSAqIDEwO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBBcHBseSByb3RhdGlvbiBqdXN0IGxpa2Ugd2l0aCB3aGVlbCBldmVudHNcbiAgICAgICAgICAgIHBsYW5ldC5yb3RhdGlvbi55ICs9IHRvdWNoRGVsdGEgKiAwLjAwMjtcbiAgICAgICAgICAgIGF0bW9zcGhlcmUucm90YXRpb24ueSA9IHBsYW5ldC5yb3RhdGlvbi55O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDaGVjayBzY3JvbGwgZGlyZWN0aW9uXG4gICAgICAgICAgICBpZiAodG91Y2hEZWx0YSA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBTY3JvbGxpbmcgZG93biAtIG1vdmUgcGxhbmV0IGNsb3NlciAoZGVjcmVhc2UgeilcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0WiA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRGVjcmVhc2UgeiBwcm9wb3J0aW9uYWwgdG8gcm90YXRpb24gYW1vdW50XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHpEZWx0YSA9IE1hdGguYWJzKHRvdWNoRGVsdGEpICogMC4wMzsgLy8gSW5jcmVhc2VkIGZyb20gMC4wMSB0byAwLjAzXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFogPSBNYXRoLm1heCgwLCB0YXJnZXRaIC0gekRlbHRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRvdWNoRGVsdGEgPCAwKSB7XG4gICAgICAgICAgICAgICAgLy8gU2Nyb2xsaW5nIHVwIC0gbW92ZSBwbGFuZXQgZmFydGhlciAoaW5jcmVhc2UgeilcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0WiA8IDMwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEluY3JlYXNlIHogcHJvcG9ydGlvbmFsIHRvIHJvdGF0aW9uIGFtb3VudFxuICAgICAgICAgICAgICAgICAgICBjb25zdCB6RGVsdGEgPSBNYXRoLmFicyh0b3VjaERlbHRhKSAqIDAuMDM7IC8vIEluY3JlYXNlZCBmcm9tIDAuMDEgdG8gMC4wM1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRaID0gTWF0aC5taW4oMzAsIHRhcmdldFogKyB6RGVsdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gVXBkYXRlIHN0YXJ0IHBvc2l0aW9uXG4gICAgICAgICAgICB0b3VjaFN0YXJ0WSA9IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGhhbmRsZVRvdWNoRW5kID0gKCkgPT4ge1xuICAgICAgICAgICAgdG91Y2hTdGFydFkgPSAwO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEhhbmRsZSBzY3JvbGwgZXZlbnRzIHRvIHVwZGF0ZSBwbGFuZXQgcG9zaXRpb25cbiAgICAgICAgY29uc3QgaGFuZGxlU2Nyb2xsID0gKCkgPT4ge1xuICAgICAgICAgICAgLy8gR2V0IGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uIGFzIHBlcmNlbnRhZ2Ugb2YgcGFnZSBoZWlnaHRcbiAgICAgICAgICAgIGNvbnN0IHNjcm9sbEhlaWdodCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQgLSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICAgICAgICBjb25zdCBzY3JvbGxUb3AgPSB3aW5kb3cuc2Nyb2xsWSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xuICAgICAgICAgICAgY29uc3Qgc2Nyb2xsUGVyY2VudCA9IE1hdGgubWluKHNjcm9sbFRvcCAvIHNjcm9sbEhlaWdodCwgMSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB4LXBvc2l0aW9uOiAyMCBhdCB0b3Agb2YgcGFnZSwgZ3JhZHVhbGx5IGluY3JlYXNpbmcgdG8gMTAwIGFzIHdlIHNjcm9sbFxuICAgICAgICAgICAgbGV0IHhQb3MgPSAyMDtcbiAgICAgICAgICAgIGlmIChzY3JvbGxQZXJjZW50ID4gMC4xKSB7XG4gICAgICAgICAgICAgICAgLy8gTWFwIDEwJS0zMCUgc2Nyb2xsIHRvIGZ1bGwgeC1wb3NpdGlvbiBjaGFuZ2UgKDIwIHRvIDEwMCkgLSBtdWNoIGZhc3RlclxuICAgICAgICAgICAgICAgIC8vIERlY3JlYXNlZCBmcm9tIDAuNCB0byAwLjIgdG8gbWFrZSBpdCBtb3ZlIGV2ZW4gZmFzdGVyXG4gICAgICAgICAgICAgICAgY29uc3QgeFNjcm9sbFBlcmNlbnQgPSBNYXRoLm1pbigoc2Nyb2xsUGVyY2VudCAtIDAuMSkgLyAwLjIsIDEpO1xuICAgICAgICAgICAgICAgIHhQb3MgPSAyMCArICg4MCAqIHhTY3JvbGxQZXJjZW50KTsgLy8gTW92ZSBmcm9tIDIwIHRvIDEwMFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGFyZ2V0IFggcG9zaXRpb24gLSBhY3R1YWwgbW92ZW1lbnQgaGFwcGVucyBpbiBhbmltYXRpb24gbG9vcFxuICAgICAgICAgICAgdGFyZ2V0WCA9IHhQb3M7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSGFuZGxlIHdpbmRvdyByZXNpemVcbiAgICAgICAgY29uc3QgaGFuZGxlUmVzaXplID0gKCkgPT4ge1xuICAgICAgICAgICAgY2FtZXJhLmFzcGVjdCA9IHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICAgICAgY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgICAgICAgICAgIHJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBwbGFuZXQgcG9zaXRpb24gb24gcmVzaXplIHRvb1xuICAgICAgICAgICAgaGFuZGxlU2Nyb2xsKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBoYW5kbGVTY3JvbGwsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFkZCB3aGVlbCBldmVudCBsaXN0ZW5lciB0byB0aGUgY29udGFpbmVyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd3aGVlbCcsIGhhbmRsZVdoZWVsLCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBBZGQgdG91Y2ggZXZlbnRzIGZvciBtb2JpbGVcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBoYW5kbGVUb3VjaFN0YXJ0LCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBoYW5kbGVUb3VjaE1vdmUsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgaGFuZGxlVG91Y2hFbmQsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIEluaXRpYWwgcm90YXRpb24gc28gRWFydGggaXMgdmlzaWJsZVxuICAgICAgICBwbGFuZXQucm90YXRpb24ueSA9IDAuNTtcbiAgICAgICAgYXRtb3NwaGVyZS5yb3RhdGlvbi55ID0gMC41O1xuICAgICAgICBcbiAgICAgICAgLy8gU2V0IGluaXRpYWwgdGFyZ2V0IHBvc2l0aW9ucyAoYWN0dWFsIHBsYW5ldCBtb3ZlbWVudCB3aWxsIGJlIGRvbmUgc21vb3RobHkgaW4gYW5pbWF0aW9uIGxvb3ApXG4gICAgICAgIHRhcmdldFggPSAyMDtcbiAgICAgICAgdGFyZ2V0WiA9IDMwO1xuICAgICAgICBwbGFuZXQucG9zaXRpb24uc2V0KDIwLCAwLCAzMCk7IC8vIFNldCBpbml0aWFsIHBvc2l0aW9uIHRvIG1hdGNoIHRhcmdldHNcbiAgICAgICAgYXRtb3NwaGVyZS5wb3NpdGlvbi5jb3B5KHBsYW5ldC5wb3NpdGlvbik7XG4gICAgICAgIFxuICAgICAgICAvLyBTdGFydCBhbmltYXRpb25cbiAgICAgICAgYW5pbWF0ZSgpO1xuXG4gICAgICAgIC8vIENyZWF0ZSBhbiBJbnRlcnNlY3Rpb25PYnNlcnZlciB0byByb3RhdGUgdGhlIHBsYW5ldCB3aGVuIHBhZ2Ugc2VjdGlvbnMgY29tZSBpbnRvIHZpZXdcbiAgICAgICAgLy8gVGhpcyBwcm92aWRlcyBhIGJhY2t1cCBtZXRob2QgaW4gY2FzZSB3aGVlbCBldmVudHMgZG9uJ3Qgd29yayB3ZWxsXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2VjdGlvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzZWN0aW9uJyk7XG4gICAgICAgICAgICBpZiAoc2VjdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50U2VjdGlvbkluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICAvLyBUcmFjayB0YXJnZXQgcm90YXRpb24gZm9yIHNtb290aGVyIHRyYW5zaXRpb25zXG4gICAgICAgICAgICAgICAgbGV0IHRhcmdldFJvdGF0aW9uWSA9IHBsYW5ldC5yb3RhdGlvbi55O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IHNlY3Rpb25PYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigoZW50cmllcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBzZWN0aW9uIGluZGV4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VjdGlvbiA9IGVudHJ5LnRhcmdldCBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IEFycmF5LmZyb20oc2VjdGlvbnMpLmluZGV4T2Yoc2VjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIHJvdGF0aW9uIGJhc2VkIG9uIHNlY3Rpb24gaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFbnN1cmUgd2Ugb25seSByb3RhdGUgaWYgd2UncmUgbW92aW5nIHRvIGEgbmV3IHNlY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggIT09IGN1cnJlbnRTZWN0aW9uSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRhcmdldCByb3RhdGlvbiAtIGFjdHVhbCByb3RhdGlvbiB3aWxsIGhhcHBlbiBzbW9vdGhseSBpbiBhbmltYXRpb24gbG9vcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRSb3RhdGlvblkgPSBNYXRoLlBJIC8gMiAqIGluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2VjdGlvbkluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LCB7IHRocmVzaG9sZDogMC4zIH0pOyAvLyBUcmlnZ2VyIHdoZW4gMzAlIG9mIHNlY3Rpb24gaXMgdmlzaWJsZVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIEFkZCByb3RhdGlvbiBpbnRlcnBvbGF0aW9uIHRvIGFuaW1hdGlvbiBsb29wXG4gICAgICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxBbmltYXRlID0gYW5pbWF0ZTtcbiAgICAgICAgICAgICAgICBhbmltYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNtb290aGx5IGludGVycG9sYXRlIHJvdGF0aW9uIHRvd2FyZCB0YXJnZXRcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm90YXRpb25EZWx0YSA9IHRhcmdldFJvdGF0aW9uWSAtIHBsYW5ldC5yb3RhdGlvbi55O1xuICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMocm90YXRpb25EZWx0YSkgPiAwLjAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFuZXQucm90YXRpb24ueSArPSByb3RhdGlvbkRlbHRhICogMC4wNTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0bW9zcGhlcmUucm90YXRpb24ueSA9IHBsYW5ldC5yb3RhdGlvbi55O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBDYWxsIG9yaWdpbmFsIGFuaW1hdGlvbiBmdW5jdGlvblxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEFuaW1hdGUoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIE9ic2VydmUgYWxsIHNlY3Rpb25zXG4gICAgICAgICAgICAgICAgc2VjdGlvbnMuZm9yRWFjaChzZWN0aW9uID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VjdGlvbk9ic2VydmVyLm9ic2VydmUoc2VjdGlvbik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDEwMDApOyAvLyBXYWl0IGZvciBzZWN0aW9ucyB0byBiZSByZWFkeVxuXG4gICAgICAgIC8vIENsZWFudXBcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3doZWVsJywgaGFuZGxlV2hlZWwpO1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBoYW5kbGVUb3VjaFN0YXJ0KTtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBoYW5kbGVUb3VjaE1vdmUpO1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgaGFuZGxlVG91Y2hFbmQpO1xuICAgICAgICAgICAgY29udGFpbmVyUmVmLmN1cnJlbnQ/LnJlbW92ZUNoaWxkKHJlbmRlcmVyLmRvbUVsZW1lbnQpO1xuICAgICAgICAgICAgcmVuZGVyZXIuZGlzcG9zZSgpO1xuICAgICAgICB9O1xuICAgIH0sIFtdKTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgXG4gICAgICAgICAgICByZWY9e2NvbnRhaW5lclJlZn0gXG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICAgICAgekluZGV4OiAxXG4gICAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgICk7XG59ICJdLCJuYW1lcyI6WyJ1c2VFZmZlY3QiLCJ1c2VSZWYiLCJUSFJFRSIsIlBsYW5ldFNjZW5lIiwiY29udGFpbmVyUmVmIiwiY3VycmVudCIsInNjZW5lIiwiU2NlbmUiLCJmb2ciLCJGb2dFeHAyIiwiY2FtZXJhIiwiUGVyc3BlY3RpdmVDYW1lcmEiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJyZW5kZXJlciIsIldlYkdMUmVuZGVyZXIiLCJhbnRpYWxpYXMiLCJhbHBoYSIsInNldFNpemUiLCJzZXRDbGVhckNvbG9yIiwidG9uZU1hcHBpbmciLCJBQ0VTRmlsbWljVG9uZU1hcHBpbmciLCJ0b25lTWFwcGluZ0V4cG9zdXJlIiwiYXBwZW5kQ2hpbGQiLCJkb21FbGVtZW50IiwiYW1iaWVudExpZ2h0IiwiQW1iaWVudExpZ2h0IiwiYWRkIiwicG9pbnRMaWdodCIsIlBvaW50TGlnaHQiLCJwb3NpdGlvbiIsInNldCIsInBvaW50TGlnaHQyIiwiY3JlYXRlU3RhckZpZWxkIiwic3RhckNvdW50IiwiZ2VvbWV0cnkiLCJCdWZmZXJHZW9tZXRyeSIsInBvc2l0aW9ucyIsIkZsb2F0MzJBcnJheSIsImkiLCJNYXRoIiwicmFuZG9tIiwic2V0QXR0cmlidXRlIiwiQnVmZmVyQXR0cmlidXRlIiwibWF0ZXJpYWwiLCJQb2ludHNNYXRlcmlhbCIsImNvbG9yIiwic2l6ZSIsInRyYW5zcGFyZW50Iiwib3BhY2l0eSIsInN0YXJzIiwiUG9pbnRzIiwic3Rhckdyb3VwcyIsInBsYW5ldEdlb21ldHJ5IiwiU3BoZXJlR2VvbWV0cnkiLCJwbGFuZXRNYXRlcmlhbCIsIk1lc2hQaG9uZ01hdGVyaWFsIiwibWFwIiwiVGV4dHVyZUxvYWRlciIsImxvYWQiLCJidW1wTWFwIiwiYnVtcFNjYWxlIiwic3BlY3VsYXJNYXAiLCJzcGVjdWxhciIsIkNvbG9yIiwic2hpbmluZXNzIiwicGxhbmV0IiwiTWVzaCIsImF0bW9zcGhlcmVHZW9tZXRyeSIsImF0bW9zcGhlcmVNYXRlcmlhbCIsIlNoYWRlck1hdGVyaWFsIiwic2lkZSIsIkJhY2tTaWRlIiwidmVydGV4U2hhZGVyIiwiZnJhZ21lbnRTaGFkZXIiLCJhdG1vc3BoZXJlIiwibG9va0F0IiwiVmVjdG9yMyIsInRhcmdldFgiLCJ0YXJnZXRaIiwiaW50ZXJwb2xhdGlvblNwZWVkIiwiYW5pbWF0ZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImN1cnJlbnRYIiwieCIsImN1cnJlbnRaIiwieiIsImFicyIsImNvcHkiLCJmb3JFYWNoIiwicm90YXRpb24iLCJ5IiwicmVuZGVyIiwiaGFuZGxlV2hlZWwiLCJldmVudCIsImRlbHRhIiwiZGVsdGFZIiwiekRlbHRhIiwibWF4IiwibWluIiwidG91Y2hTdGFydFkiLCJoYW5kbGVUb3VjaFN0YXJ0IiwidG91Y2hlcyIsImNsaWVudFkiLCJoYW5kbGVUb3VjaE1vdmUiLCJ0b3VjaERlbHRhIiwiaGFuZGxlVG91Y2hFbmQiLCJoYW5kbGVTY3JvbGwiLCJzY3JvbGxIZWlnaHQiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsInNjcm9sbFRvcCIsInNjcm9sbFkiLCJzY3JvbGxQZXJjZW50IiwieFBvcyIsInhTY3JvbGxQZXJjZW50IiwiaGFuZGxlUmVzaXplIiwiYXNwZWN0IiwidXBkYXRlUHJvamVjdGlvbk1hdHJpeCIsImFkZEV2ZW50TGlzdGVuZXIiLCJwYXNzaXZlIiwic2V0VGltZW91dCIsInNlY3Rpb25zIiwicXVlcnlTZWxlY3RvckFsbCIsImxlbmd0aCIsImN1cnJlbnRTZWN0aW9uSW5kZXgiLCJ0YXJnZXRSb3RhdGlvblkiLCJzZWN0aW9uT2JzZXJ2ZXIiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImVudHJpZXMiLCJlbnRyeSIsImlzSW50ZXJzZWN0aW5nIiwic2VjdGlvbiIsInRhcmdldCIsImluZGV4IiwiQXJyYXkiLCJmcm9tIiwiaW5kZXhPZiIsIlBJIiwidGhyZXNob2xkIiwib3JpZ2luYWxBbmltYXRlIiwicm90YXRpb25EZWx0YSIsIm9ic2VydmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlQ2hpbGQiLCJkaXNwb3NlIiwiZGl2IiwicmVmIiwic3R5bGUiLCJ0b3AiLCJsZWZ0Iiwid2lkdGgiLCJoZWlnaHQiLCJ6SW5kZXgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/PlanetScene.tsx\n"));

/***/ })

});