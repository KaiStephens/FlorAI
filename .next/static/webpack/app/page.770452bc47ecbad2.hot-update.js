"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/PlanetScene.tsx":
/*!****************************************!*\
  !*** ./src/components/PlanetScene.tsx ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ PlanetScene; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.module.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\nfunction PlanetScene() {\n    _s();\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!containerRef.current) return;\n        // Scene setup\n        const scene = new three__WEBPACK_IMPORTED_MODULE_2__.Scene();\n        // Add fog for depth\n        scene.fog = new three__WEBPACK_IMPORTED_MODULE_2__.FogExp2(0x000511, 0.01);\n        // Use a wider field of view to capture more of the scene\n        const camera = new three__WEBPACK_IMPORTED_MODULE_2__.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 1000);\n        // Enhanced renderer with better shadows\n        const renderer = new three__WEBPACK_IMPORTED_MODULE_2__.WebGLRenderer({\n            antialias: true,\n            alpha: true\n        });\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.setClearColor(0x000511);\n        renderer.toneMapping = three__WEBPACK_IMPORTED_MODULE_2__.ACESFilmicToneMapping;\n        renderer.toneMappingExposure = 1.2;\n        containerRef.current.appendChild(renderer.domElement);\n        // Enhanced Lighting\n        const ambientLight = new three__WEBPACK_IMPORTED_MODULE_2__.AmbientLight(0xffffff, 0.8);\n        scene.add(ambientLight);\n        const pointLight = new three__WEBPACK_IMPORTED_MODULE_2__.PointLight(0xffffff, 2);\n        pointLight.position.set(25, 5, 15); // Position light to illuminate planet from right\n        scene.add(pointLight);\n        // Add a second point light for better illumination\n        const pointLight2 = new three__WEBPACK_IMPORTED_MODULE_2__.PointLight(0xc4f1de, 1.5);\n        pointLight2.position.set(-10, -5, -5);\n        scene.add(pointLight2);\n        // Create stars - simple and spread throughout the scene\n        const createStarField = ()=>{\n            const starCount = 3000;\n            const geometry = new three__WEBPACK_IMPORTED_MODULE_2__.BufferGeometry();\n            const positions = new Float32Array(starCount * 3);\n            // Create stars with a wider distribution\n            for(let i = 0; i < starCount; i++){\n                // Distribute stars in a cube formation that extends well beyond the camera view\n                positions[i * 3] = (Math.random() - 0.5) * 200;\n                positions[i * 3 + 1] = (Math.random() - 0.5) * 200;\n                positions[i * 3 + 2] = (Math.random() - 0.5) * 200;\n            }\n            geometry.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_2__.BufferAttribute(positions, 3));\n            // Use a single star size instead of different sizes\n            const material = new three__WEBPACK_IMPORTED_MODULE_2__.PointsMaterial({\n                color: 0xffffff,\n                size: 0.2,\n                transparent: true,\n                opacity: 0.8\n            });\n            const stars = new three__WEBPACK_IMPORTED_MODULE_2__.Points(geometry, material);\n            scene.add(stars);\n            return [\n                stars\n            ]; // Return as an array to maintain compatibility with animation code\n        };\n        const starGroups = createStarField();\n        // Create planet (on the right side)\n        const planetGeometry = new three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry(12, 64, 64);\n        const planetMaterial = new three__WEBPACK_IMPORTED_MODULE_2__.MeshPhongMaterial({\n            map: new three__WEBPACK_IMPORTED_MODULE_2__.TextureLoader().load(\"https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/planets/earth_atmos_2048.jpg\"),\n            bumpMap: new three__WEBPACK_IMPORTED_MODULE_2__.TextureLoader().load(\"https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/planets/earth_normal_2048.jpg\"),\n            bumpScale: 0.05,\n            specularMap: new three__WEBPACK_IMPORTED_MODULE_2__.TextureLoader().load(\"https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/planets/earth_specular_2048.jpg\"),\n            specular: new three__WEBPACK_IMPORTED_MODULE_2__.Color(\"grey\"),\n            shininess: 15\n        });\n        const planet = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(planetGeometry, planetMaterial);\n        scene.add(planet);\n        // Add plant-like atmosphere\n        const atmosphereGeometry = new three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry(12.4, 64, 64);\n        const atmosphereMaterial = new three__WEBPACK_IMPORTED_MODULE_2__.ShaderMaterial({\n            transparent: true,\n            side: three__WEBPACK_IMPORTED_MODULE_2__.BackSide,\n            vertexShader: \"\\n                varying vec3 vNormal;\\n                void main() {\\n                    vNormal = normalize(normalMatrix * normal);\\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n                }\\n            \",\n            fragmentShader: \"\\n                varying vec3 vNormal;\\n                void main() {\\n                    float intensity = pow(0.7 - dot(vNormal, vec3(0.0, 0.0, 1.0)), 2.0);\\n                    gl_FragColor = vec4(0.4, 0.8, 0.4, 1.0) * intensity;\\n                }\\n            \"\n        });\n        const atmosphere = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(atmosphereGeometry, atmosphereMaterial);\n        scene.add(atmosphere);\n        // Camera position - adjusted for the much larger and further-right planet\n        camera.position.set(-20, 0, 25);\n        // Look at a point much further to the right\n        camera.lookAt(new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(60, 0, 0));\n        // Animation\n        // Track target positions for smoother interpolation\n        let targetX = 20;\n        let targetZ = 30;\n        let targetRotationY = 0.5; // Add target rotation for smooth transitions\n        const interpolationSpeed = 0.05; // Controls smoothness of transitions\n        // Track oscillation direction (true = moving toward viewer, false = moving away)\n        let movingTowardViewer = true;\n        // Auto-oscillation values\n        let lastRotationY = 0.5;\n        const oscillationSpeed = 0.1; // Controls how fast z oscillates\n        function animate() {\n            requestAnimationFrame(animate);\n            // Smoothly interpolate current position toward target position\n            const currentX = planet.position.x;\n            const currentZ = planet.position.z;\n            // Interpolate X position (right movement)\n            if (Math.abs(targetX - currentX) > 0.01) {\n                planet.position.x += (targetX - currentX) * interpolationSpeed;\n            }\n            // Check if we need to reverse direction based on z limits\n            if (targetZ <= 0.1 && movingTowardViewer) {\n                movingTowardViewer = false; // Start moving away\n                targetZ = 0.1; // Prevent going below 0\n            } else if (targetZ >= 29.9 && !movingTowardViewer) {\n                movingTowardViewer = true; // Start moving toward viewer\n                targetZ = 29.9; // Prevent exceeding 30\n            }\n            // Auto-oscillate based on rotation\n            // If rotation has changed significantly, apply oscillation effect\n            const autoRotationDelta = Math.abs(planet.rotation.y - lastRotationY);\n            if (autoRotationDelta > 0.01) {\n                // Move in the current oscillation direction\n                if (movingTowardViewer) {\n                    targetZ = Math.max(0.1, targetZ - autoRotationDelta * oscillationSpeed * 30);\n                } else {\n                    targetZ = Math.min(29.9, targetZ + autoRotationDelta * oscillationSpeed * 30);\n                }\n                lastRotationY = planet.rotation.y;\n            }\n            // Interpolate Z position (distance)\n            if (Math.abs(targetZ - currentZ) > 0.01) {\n                planet.position.z += (targetZ - currentZ) * interpolationSpeed;\n            }\n            // Interpolate rotation for smooth transitions\n            const rotationInterpolationDelta = targetRotationY - planet.rotation.y;\n            if (Math.abs(rotationInterpolationDelta) > 0.01) {\n                planet.rotation.y += rotationInterpolationDelta * interpolationSpeed;\n                atmosphere.rotation.y = planet.rotation.y;\n            }\n            // Keep atmosphere with planet\n            atmosphere.position.copy(planet.position);\n            // Rotate star fields slightly for subtle movement\n            starGroups.forEach((stars, i)=>{\n                stars.rotation.y += 0.0001 * (i + 1);\n                stars.rotation.x += 0.00005 * (i + 1);\n            });\n            renderer.render(scene, camera);\n        }\n        // Handle wheel events for rotation - this is more direct than scroll\n        const handleWheel = (event)=>{\n            // Determine direction and force of wheel event\n            const delta = event.deltaY;\n            // Apply rotation directly to the planet (via target)\n            targetRotationY += delta * 0.002;\n            // Check scroll direction and apply z movement based on current oscillation direction\n            const zDelta = Math.abs(delta) * 0.03; // Increased from 0.01 to 0.03\n            if (delta > 0) {\n                if (movingTowardViewer) {\n                    // Moving toward viewer (decreasing z)\n                    targetZ = Math.max(0.1, targetZ - zDelta);\n                } else {\n                    // Moving away from viewer (increasing z)\n                    targetZ = Math.min(29.9, targetZ + zDelta);\n                }\n            } else if (delta < 0) {\n                if (movingTowardViewer) {\n                    // Moving toward viewer (decreasing z) - reverse this when scrolling up\n                    targetZ = Math.min(29.9, targetZ + zDelta);\n                } else {\n                    // Moving away from viewer (increasing z) - reverse this when scrolling up\n                    targetZ = Math.max(0.1, targetZ - zDelta);\n                }\n            }\n        };\n        // Track touch position for mobile devices\n        let touchStartY = 0;\n        // Handle touch events for mobile\n        const handleTouchStart = (event)=>{\n            touchStartY = event.touches[0].clientY;\n        };\n        const handleTouchMove = (event)=>{\n            // Skip if no starting position\n            if (touchStartY === 0) return;\n            // Calculate delta (negative to match wheel direction)\n            const touchDelta = -(event.touches[0].clientY - touchStartY) * 10;\n            // Apply rotation just like with wheel events\n            targetRotationY += touchDelta * 0.002;\n            // Apply z movement based on current oscillation direction (similar to wheel handler)\n            const zDelta = Math.abs(touchDelta) * 0.03;\n            if (touchDelta > 0) {\n                if (movingTowardViewer) {\n                    // Moving toward viewer (decreasing z)\n                    targetZ = Math.max(0.1, targetZ - zDelta);\n                } else {\n                    // Moving away from viewer (increasing z)\n                    targetZ = Math.min(29.9, targetZ + zDelta);\n                }\n            } else if (touchDelta < 0) {\n                if (movingTowardViewer) {\n                    // Moving toward viewer (decreasing z) - reverse this when scrolling up\n                    targetZ = Math.min(29.9, targetZ + zDelta);\n                } else {\n                    // Moving away from viewer (increasing z) - reverse this when scrolling up\n                    targetZ = Math.max(0.1, targetZ - zDelta);\n                }\n            }\n            // Update start position\n            touchStartY = event.touches[0].clientY;\n        };\n        const handleTouchEnd = ()=>{\n            touchStartY = 0;\n        };\n        // Handle scroll events to update planet position\n        const handleScroll = ()=>{\n            // Get current scroll position as percentage of page height\n            const scrollHeight = document.documentElement.scrollHeight - window.innerHeight;\n            const scrollTop = window.scrollY || document.documentElement.scrollTop;\n            const scrollPercent = Math.min(scrollTop / scrollHeight, 1);\n            // Reset positions when scrolling back to the top\n            if (scrollPercent < 0.05) {\n                // Reset to initial positions\n                targetX = 20;\n                targetZ = 30;\n                movingTowardViewer = true;\n                return;\n            }\n            // Calculate x-position: 20 at top of page, gradually increasing to 200 as we scroll\n            let xPos = 20;\n            if (scrollPercent > 0.1) {\n                // Map 10%-30% scroll to full x-position change (20 to 200) - much further right\n                // Decreased from 0.4 to 0.2 to make it move even faster\n                const xScrollPercent = Math.min((scrollPercent - 0.1) / 0.2, 1);\n                xPos = 20 + 180 * xScrollPercent; // Move from 20 to 200 (increased from 80 to 180)\n            }\n            // Update target X position - actual movement happens in animation loop\n            targetX = xPos;\n        };\n        // Handle window resize\n        const handleResize = ()=>{\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n            // Update planet position on resize too\n            handleScroll();\n        };\n        window.addEventListener(\"resize\", handleResize);\n        window.addEventListener(\"scroll\", handleScroll, {\n            passive: true\n        });\n        // Add wheel event listener to the container\n        window.addEventListener(\"wheel\", handleWheel, {\n            passive: true\n        });\n        // Add touch events for mobile\n        window.addEventListener(\"touchstart\", handleTouchStart, {\n            passive: true\n        });\n        window.addEventListener(\"touchmove\", handleTouchMove, {\n            passive: true\n        });\n        window.addEventListener(\"touchend\", handleTouchEnd, {\n            passive: true\n        });\n        // Initial rotation and position\n        targetRotationY = 0.5;\n        planet.rotation.y = 0.5;\n        atmosphere.rotation.y = 0.5;\n        // Set initial target positions (actual planet movement will be done smoothly in animation loop)\n        targetX = 20;\n        targetZ = 30;\n        planet.position.set(20, 0, 30); // Set initial position to match targets\n        atmosphere.position.copy(planet.position);\n        // Start animation\n        animate();\n        // Create an IntersectionObserver to rotate the planet when page sections come into view\n        // This provides a backup method in case wheel events don't work well\n        setTimeout(()=>{\n            const sections = document.querySelectorAll(\"section\");\n            if (sections.length > 0) {\n                let currentSectionIndex = 0;\n                const sectionObserver = new IntersectionObserver((entries)=>{\n                    entries.forEach((entry)=>{\n                        if (entry.isIntersecting) {\n                            // Get the section index\n                            const section = entry.target;\n                            const index = Array.from(sections).indexOf(section);\n                            // Determine rotation based on section index\n                            // Ensure we only rotate if we're moving to a new section\n                            if (index !== currentSectionIndex) {\n                                // Set target rotation - actual rotation will happen smoothly in animation loop\n                                targetRotationY = Math.PI / 2 * index;\n                                currentSectionIndex = index;\n                            }\n                        }\n                    });\n                }, {\n                    threshold: 0.3\n                }); // Trigger when 30% of section is visible\n                // Observe all sections\n                sections.forEach((section)=>{\n                    sectionObserver.observe(section);\n                });\n            }\n        }, 1000); // Wait for sections to be ready\n        // Cleanup\n        return ()=>{\n            var _containerRef_current;\n            window.removeEventListener(\"resize\", handleResize);\n            window.removeEventListener(\"wheel\", handleWheel);\n            window.removeEventListener(\"touchstart\", handleTouchStart);\n            window.removeEventListener(\"touchmove\", handleTouchMove);\n            window.removeEventListener(\"touchend\", handleTouchEnd);\n            (_containerRef_current = containerRef.current) === null || _containerRef_current === void 0 ? void 0 : _containerRef_current.removeChild(renderer.domElement);\n            renderer.dispose();\n        };\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: containerRef,\n        style: {\n            position: \"fixed\",\n            top: 0,\n            left: 0,\n            width: \"100%\",\n            height: \"100%\",\n            zIndex: 1\n        }\n    }, void 0, false, {\n        fileName: \"/Users/kaistephens/Downloads/code/florAI/webApp/FlorAI/src/components/PlanetScene.tsx\",\n        lineNumber: 375,\n        columnNumber: 9\n    }, this);\n}\n_s(PlanetScene, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c = PlanetScene;\nvar _c;\n$RefreshReg$(_c, \"PlanetScene\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/PlanetScene.tsx\n"));

/***/ })

});