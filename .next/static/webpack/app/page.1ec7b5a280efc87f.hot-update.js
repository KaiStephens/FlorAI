"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/PlanetScene.tsx":
/*!****************************************!*\
  !*** ./src/components/PlanetScene.tsx ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ PlanetScene; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.module.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\nfunction PlanetScene() {\n    _s();\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!containerRef.current) return;\n        // Scene setup\n        const scene = new three__WEBPACK_IMPORTED_MODULE_2__.Scene();\n        // Add fog for depth\n        scene.fog = new three__WEBPACK_IMPORTED_MODULE_2__.FogExp2(0x000511, 0.01);\n        // Use a wider field of view to capture more of the scene\n        const camera = new three__WEBPACK_IMPORTED_MODULE_2__.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 1000);\n        // Enhanced renderer with better shadows\n        const renderer = new three__WEBPACK_IMPORTED_MODULE_2__.WebGLRenderer({\n            antialias: true,\n            alpha: true\n        });\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.setClearColor(0x000511);\n        renderer.toneMapping = three__WEBPACK_IMPORTED_MODULE_2__.ACESFilmicToneMapping;\n        renderer.toneMappingExposure = 1.2;\n        containerRef.current.appendChild(renderer.domElement);\n        // Enhanced Lighting\n        const ambientLight = new three__WEBPACK_IMPORTED_MODULE_2__.AmbientLight(0xffffff, 0.8);\n        scene.add(ambientLight);\n        const pointLight = new three__WEBPACK_IMPORTED_MODULE_2__.PointLight(0xffffff, 2);\n        pointLight.position.set(25, 5, 15); // Position light to illuminate planet from right\n        scene.add(pointLight);\n        // Add a second point light for better illumination\n        const pointLight2 = new three__WEBPACK_IMPORTED_MODULE_2__.PointLight(0xc4f1de, 1.5);\n        pointLight2.position.set(-10, -5, -5);\n        scene.add(pointLight2);\n        // Create stars - simple and spread throughout the scene\n        const createStarField = ()=>{\n            const starCount = 3000;\n            const geometry = new three__WEBPACK_IMPORTED_MODULE_2__.BufferGeometry();\n            const positions = new Float32Array(starCount * 3);\n            // Create stars with a wider distribution\n            for(let i = 0; i < starCount; i++){\n                // Distribute stars in a cube formation that extends well beyond the camera view\n                positions[i * 3] = (Math.random() - 0.5) * 200;\n                positions[i * 3 + 1] = (Math.random() - 0.5) * 200;\n                positions[i * 3 + 2] = (Math.random() - 0.5) * 200;\n            }\n            geometry.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_2__.BufferAttribute(positions, 3));\n            // Use a single star size instead of different sizes\n            const material = new three__WEBPACK_IMPORTED_MODULE_2__.PointsMaterial({\n                color: 0xffffff,\n                size: 0.2,\n                transparent: true,\n                opacity: 0.8\n            });\n            const stars = new three__WEBPACK_IMPORTED_MODULE_2__.Points(geometry, material);\n            scene.add(stars);\n            return [\n                stars\n            ]; // Return as an array to maintain compatibility with animation code\n        };\n        const starGroups = createStarField();\n        // Create planet (on the right side)\n        const planetGeometry = new three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry(12, 64, 64);\n        const planetMaterial = new three__WEBPACK_IMPORTED_MODULE_2__.MeshPhongMaterial({\n            map: new three__WEBPACK_IMPORTED_MODULE_2__.TextureLoader().load(\"https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/planets/earth_atmos_2048.jpg\"),\n            bumpMap: new three__WEBPACK_IMPORTED_MODULE_2__.TextureLoader().load(\"https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/planets/earth_normal_2048.jpg\"),\n            bumpScale: 0.05,\n            specularMap: new three__WEBPACK_IMPORTED_MODULE_2__.TextureLoader().load(\"https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/planets/earth_specular_2048.jpg\"),\n            specular: new three__WEBPACK_IMPORTED_MODULE_2__.Color(\"grey\"),\n            shininess: 15\n        });\n        const planet = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(planetGeometry, planetMaterial);\n        planet.position.set(20, 0, 30);\n        scene.add(planet);\n        // Add plant-like atmosphere\n        const atmosphereGeometry = new three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry(12.4, 64, 64);\n        const atmosphereMaterial = new three__WEBPACK_IMPORTED_MODULE_2__.ShaderMaterial({\n            transparent: true,\n            side: three__WEBPACK_IMPORTED_MODULE_2__.BackSide,\n            vertexShader: \"\\n                varying vec3 vNormal;\\n                void main() {\\n                    vNormal = normalize(normalMatrix * normal);\\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n                }\\n            \",\n            fragmentShader: \"\\n                varying vec3 vNormal;\\n                void main() {\\n                    float intensity = pow(0.7 - dot(vNormal, vec3(0.0, 0.0, 1.0)), 2.0);\\n                    gl_FragColor = vec4(0.4, 0.8, 0.4, 1.0) * intensity;\\n                }\\n            \"\n        });\n        const atmosphere = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(atmosphereGeometry, atmosphereMaterial);\n        atmosphere.position.copy(planet.position); // Match planet position exactly\n        scene.add(atmosphere);\n        // Camera position - adjusted for the much larger and further-right planet\n        camera.position.set(-20, 0, 25);\n        // Look at a point much further to the right\n        camera.lookAt(new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(60, 0, 0));\n        // Animation\n        function animate() {\n            requestAnimationFrame(animate);\n            // Keep atmosphere with planet\n            atmosphere.position.copy(planet.position);\n            // Rotate star fields slightly for subtle movement\n            starGroups.forEach((stars, i)=>{\n                stars.rotation.y += 0.0001 * (i + 1);\n                stars.rotation.x += 0.00005 * (i + 1);\n            });\n            renderer.render(scene, camera);\n        }\n        // Handle wheel events for rotation - this is more direct than scroll\n        const handleWheel = (event)=>{\n            // Determine direction and force of wheel event\n            const delta = event.deltaY;\n            // Apply rotation directly to the planet\n            planet.rotation.y += delta * 0.002;\n            atmosphere.rotation.y = planet.rotation.y;\n            // Move planet closer (decrease z) as it rotates\n            // Only decrease z down to a minimum of 0\n            const currentZ = planet.position.z;\n            if (currentZ > 0) {\n                // Decrease z proportional to rotation amount but always moving forward\n                const zDelta = Math.abs(delta) * 0.01;\n                planet.position.z = Math.max(0, currentZ - zDelta);\n                // Keep atmosphere with planet\n                atmosphere.position.copy(planet.position);\n            }\n        };\n        // Track touch position for mobile devices\n        let touchStartY = 0;\n        // Handle touch events for mobile\n        const handleTouchStart = (event)=>{\n            touchStartY = event.touches[0].clientY;\n        };\n        const handleTouchMove = (event)=>{\n            // Skip if no starting position\n            if (touchStartY === 0) return;\n            // Calculate delta (negative to match wheel direction)\n            const touchDelta = -(event.touches[0].clientY - touchStartY) * 10;\n            // Apply rotation just like with wheel events\n            planet.rotation.y += touchDelta * 0.002;\n            atmosphere.rotation.y = planet.rotation.y;\n            // Move planet closer (decrease z) as it rotates\n            // Only decrease z down to a minimum of 0\n            const currentZ = planet.position.z;\n            if (currentZ > 0) {\n                // Decrease z proportional to rotation amount but always moving forward\n                const zDelta = Math.abs(touchDelta) * 0.01;\n                planet.position.z = Math.max(0, currentZ - zDelta);\n                // Keep atmosphere with planet\n                atmosphere.position.copy(planet.position);\n            }\n            // Update start position\n            touchStartY = event.touches[0].clientY;\n        };\n        const handleTouchEnd = ()=>{\n            touchStartY = 0;\n        };\n        // Handle scroll events to update planet position\n        const handleScroll = ()=>{\n            // Get current scroll position as percentage of page height\n            const scrollHeight = document.documentElement.scrollHeight - window.innerHeight;\n            const scrollTop = window.scrollY || document.documentElement.scrollTop;\n            const scrollPercent = Math.min(scrollTop / scrollHeight, 1);\n            // Calculate x-position: 20 at top of page, gradually increasing to 100 as we scroll\n            let xPos = 20;\n            if (scrollPercent > 0.1) {\n                // Map 10%-70% scroll to full x-position change (20 to 100)\n                const xScrollPercent = Math.min((scrollPercent - 0.1) / 0.6, 1);\n                xPos = 20 + 80 * xScrollPercent; // Move from 20 to 100\n            }\n            // Update ONLY the x position of the planet, preserving z position\n            const currentZ = planet.position.z;\n            planet.position.set(xPos, 0, currentZ);\n        };\n        // Handle window resize\n        const handleResize = ()=>{\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n            // Update planet position on resize too\n            handleScroll();\n        };\n        window.addEventListener(\"resize\", handleResize);\n        window.addEventListener(\"scroll\", handleScroll, {\n            passive: true\n        });\n        // Add wheel event listener to the container\n        window.addEventListener(\"wheel\", handleWheel, {\n            passive: true\n        });\n        // Add touch events for mobile\n        window.addEventListener(\"touchstart\", handleTouchStart, {\n            passive: true\n        });\n        window.addEventListener(\"touchmove\", handleTouchMove, {\n            passive: true\n        });\n        window.addEventListener(\"touchend\", handleTouchEnd, {\n            passive: true\n        });\n        // Initial rotation so Earth is visible\n        planet.rotation.y = 0.5;\n        atmosphere.rotation.y = 0.5;\n        // Start animation\n        animate();\n        // Create an IntersectionObserver to rotate the planet when page sections come into view\n        // This provides a backup method in case wheel events don't work well\n        setTimeout(()=>{\n            const sections = document.querySelectorAll(\"section\");\n            if (sections.length > 0) {\n                let currentSectionIndex = 0;\n                const sectionObserver = new IntersectionObserver((entries)=>{\n                    entries.forEach((entry)=>{\n                        if (entry.isIntersecting) {\n                            // Get the section index\n                            const section = entry.target;\n                            const index = Array.from(sections).indexOf(section);\n                            // Determine rotation based on section index\n                            // Ensure we only rotate if we're moving to a new section\n                            if (index !== currentSectionIndex) {\n                                // Rotate 1/4 turn per section\n                                planet.rotation.y = Math.PI / 2 * index;\n                                atmosphere.rotation.y = planet.rotation.y;\n                                currentSectionIndex = index;\n                            }\n                        }\n                    });\n                }, {\n                    threshold: 0.3\n                }); // Trigger when 30% of section is visible\n                // Observe all sections\n                sections.forEach((section)=>{\n                    sectionObserver.observe(section);\n                });\n            }\n        }, 1000); // Wait for sections to be ready\n        // Cleanup\n        return ()=>{\n            var _containerRef_current;\n            window.removeEventListener(\"resize\", handleResize);\n            window.removeEventListener(\"wheel\", handleWheel);\n            window.removeEventListener(\"touchstart\", handleTouchStart);\n            window.removeEventListener(\"touchmove\", handleTouchMove);\n            window.removeEventListener(\"touchend\", handleTouchEnd);\n            (_containerRef_current = containerRef.current) === null || _containerRef_current === void 0 ? void 0 : _containerRef_current.removeChild(renderer.domElement);\n            renderer.dispose();\n        };\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: containerRef,\n        style: {\n            position: \"fixed\",\n            top: 0,\n            left: 0,\n            width: \"100%\",\n            height: \"100%\",\n            zIndex: 1\n        }\n    }, void 0, false, {\n        fileName: \"/Users/kaistephens/Downloads/code/florAI/webApp/FlorAI/src/components/PlanetScene.tsx\",\n        lineNumber: 290,\n        columnNumber: 9\n    }, this);\n}\n_s(PlanetScene, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c = PlanetScene;\nvar _c;\n$RefreshReg$(_c, \"PlanetScene\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL1BsYW5ldFNjZW5lLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBRTBDO0FBQ1g7QUFHaEIsU0FBU0c7O0lBQ3BCLE1BQU1DLGVBQWVILDZDQUFNQSxDQUFpQjtJQUU1Q0QsZ0RBQVNBLENBQUM7UUFDTixJQUFJLENBQUNJLGFBQWFDLE9BQU8sRUFBRTtRQUUzQixjQUFjO1FBQ2QsTUFBTUMsUUFBUSxJQUFJSix3Q0FBVztRQUU3QixvQkFBb0I7UUFDcEJJLE1BQU1FLEdBQUcsR0FBRyxJQUFJTiwwQ0FBYSxDQUFDLFVBQVU7UUFFeEMseURBQXlEO1FBQ3pELE1BQU1RLFNBQVMsSUFBSVIsb0RBQXVCLENBQUMsSUFBSVUsT0FBT0MsVUFBVSxHQUFHRCxPQUFPRSxXQUFXLEVBQUUsS0FBSztRQUU1Rix3Q0FBd0M7UUFDeEMsTUFBTUMsV0FBVyxJQUFJYixnREFBbUIsQ0FBQztZQUNyQ2UsV0FBVztZQUNYQyxPQUFPO1FBQ1g7UUFDQUgsU0FBU0ksT0FBTyxDQUFDUCxPQUFPQyxVQUFVLEVBQUVELE9BQU9FLFdBQVc7UUFDdERDLFNBQVNLLGFBQWEsQ0FBQztRQUN2QkwsU0FBU00sV0FBVyxHQUFHbkIsd0RBQTJCO1FBQ2xEYSxTQUFTUSxtQkFBbUIsR0FBRztRQUMvQm5CLGFBQWFDLE9BQU8sQ0FBQ21CLFdBQVcsQ0FBQ1QsU0FBU1UsVUFBVTtRQUVwRCxvQkFBb0I7UUFDcEIsTUFBTUMsZUFBZSxJQUFJeEIsK0NBQWtCLENBQUMsVUFBVTtRQUN0REksTUFBTXNCLEdBQUcsQ0FBQ0Y7UUFFVixNQUFNRyxhQUFhLElBQUkzQiw2Q0FBZ0IsQ0FBQyxVQUFVO1FBQ2xEMkIsV0FBV0UsUUFBUSxDQUFDQyxHQUFHLENBQUMsSUFBSSxHQUFHLEtBQUssaURBQWlEO1FBQ3JGMUIsTUFBTXNCLEdBQUcsQ0FBQ0M7UUFFVixtREFBbUQ7UUFDbkQsTUFBTUksY0FBYyxJQUFJL0IsNkNBQWdCLENBQUMsVUFB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Q1JDLFFBQVE7UUFDWjs7Ozs7O0FBR1o7R0F2U3dCaEo7S0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvUGxhbmV0U2NlbmUudHN4PzlhMTYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbmltcG9ydCB7IE9yYml0Q29udHJvbHMgfSBmcm9tICd0aHJlZS9leGFtcGxlcy9qc20vY29udHJvbHMvT3JiaXRDb250cm9scyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBsYW5ldFNjZW5lKCkge1xuICAgIGNvbnN0IGNvbnRhaW5lclJlZiA9IHVzZVJlZjxIVE1MRGl2RWxlbWVudD4obnVsbCk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIWNvbnRhaW5lclJlZi5jdXJyZW50KSByZXR1cm47XG5cbiAgICAgICAgLy8gU2NlbmUgc2V0dXBcbiAgICAgICAgY29uc3Qgc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFkZCBmb2cgZm9yIGRlcHRoXG4gICAgICAgIHNjZW5lLmZvZyA9IG5ldyBUSFJFRS5Gb2dFeHAyKDB4MDAwNTExLCAwLjAxKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFVzZSBhIHdpZGVyIGZpZWxkIG9mIHZpZXcgdG8gY2FwdHVyZSBtb3JlIG9mIHRoZSBzY2VuZVxuICAgICAgICBjb25zdCBjYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoNjAsIHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0LCAwLjEsIDEwMDApO1xuICAgICAgICBcbiAgICAgICAgLy8gRW5oYW5jZWQgcmVuZGVyZXIgd2l0aCBiZXR0ZXIgc2hhZG93c1xuICAgICAgICBjb25zdCByZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHsgXG4gICAgICAgICAgICBhbnRpYWxpYXM6IHRydWUsXG4gICAgICAgICAgICBhbHBoYTogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgICAgIHJlbmRlcmVyLnNldENsZWFyQ29sb3IoMHgwMDA1MTEpO1xuICAgICAgICByZW5kZXJlci50b25lTWFwcGluZyA9IFRIUkVFLkFDRVNGaWxtaWNUb25lTWFwcGluZztcbiAgICAgICAgcmVuZGVyZXIudG9uZU1hcHBpbmdFeHBvc3VyZSA9IDEuMjtcbiAgICAgICAgY29udGFpbmVyUmVmLmN1cnJlbnQuYXBwZW5kQ2hpbGQocmVuZGVyZXIuZG9tRWxlbWVudCk7XG5cbiAgICAgICAgLy8gRW5oYW5jZWQgTGlnaHRpbmdcbiAgICAgICAgY29uc3QgYW1iaWVudExpZ2h0ID0gbmV3IFRIUkVFLkFtYmllbnRMaWdodCgweGZmZmZmZiwgMC44KTtcbiAgICAgICAgc2NlbmUuYWRkKGFtYmllbnRMaWdodCk7XG5cbiAgICAgICAgY29uc3QgcG9pbnRMaWdodCA9IG5ldyBUSFJFRS5Qb2ludExpZ2h0KDB4ZmZmZmZmLCAyKTtcbiAgICAgICAgcG9pbnRMaWdodC5wb3NpdGlvbi5zZXQoMjUsIDUsIDE1KTsgLy8gUG9zaXRpb24gbGlnaHQgdG8gaWxsdW1pbmF0ZSBwbGFuZXQgZnJvbSByaWdodFxuICAgICAgICBzY2VuZS5hZGQocG9pbnRMaWdodCk7XG5cbiAgICAgICAgLy8gQWRkIGEgc2Vjb25kIHBvaW50IGxpZ2h0IGZvciBiZXR0ZXIgaWxsdW1pbmF0aW9uXG4gICAgICAgIGNvbnN0IHBvaW50TGlnaHQyID0gbmV3IFRIUkVFLlBvaW50TGlnaHQoMHhjNGYxZGUsIDEuNSk7XG4gICAgICAgIHBvaW50TGlnaHQyLnBvc2l0aW9uLnNldCgtMTAsIC01LCAtNSk7XG4gICAgICAgIHNjZW5lLmFkZChwb2ludExpZ2h0Mik7XG5cbiAgICAgICAgLy8gQ3JlYXRlIHN0YXJzIC0gc2ltcGxlIGFuZCBzcHJlYWQgdGhyb3VnaG91dCB0aGUgc2NlbmVcbiAgICAgICAgY29uc3QgY3JlYXRlU3RhckZpZWxkID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3RhckNvdW50ID0gMzAwMDtcbiAgICAgICAgICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCk7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KHN0YXJDb3VudCAqIDMpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDcmVhdGUgc3RhcnMgd2l0aCBhIHdpZGVyIGRpc3RyaWJ1dGlvblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGFyQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIC8vIERpc3RyaWJ1dGUgc3RhcnMgaW4gYSBjdWJlIGZvcm1hdGlvbiB0aGF0IGV4dGVuZHMgd2VsbCBiZXlvbmQgdGhlIGNhbWVyYSB2aWV3XG4gICAgICAgICAgICAgICAgcG9zaXRpb25zW2kgKiAzXSA9IChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDIwMDtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbnNbaSAqIDMgKyAxXSA9IChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDIwMDtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbnNbaSAqIDMgKyAyXSA9IChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDIwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZ2VvbWV0cnkuc2V0QXR0cmlidXRlKCdwb3NpdGlvbicsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUocG9zaXRpb25zLCAzKSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFVzZSBhIHNpbmdsZSBzdGFyIHNpemUgaW5zdGVhZCBvZiBkaWZmZXJlbnQgc2l6ZXNcbiAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLlBvaW50c01hdGVyaWFsKHsgXG4gICAgICAgICAgICAgICAgY29sb3I6IDB4ZmZmZmZmLCBcbiAgICAgICAgICAgICAgICBzaXplOiAwLjIsIC8vIFNtYWxsZXIsIGVxdWFsLXNpemVkIHN0YXJzXG4gICAgICAgICAgICAgICAgdHJhbnNwYXJlbnQ6IHRydWUsIFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuOCBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBzdGFycyA9IG5ldyBUSFJFRS5Qb2ludHMoZ2VvbWV0cnksIG1hdGVyaWFsKTtcbiAgICAgICAgICAgIHNjZW5lLmFkZChzdGFycyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBbc3RhcnNdOyAvLyBSZXR1cm4gYXMgYW4gYXJyYXkgdG8gbWFpbnRhaW4gY29tcGF0aWJpbGl0eSB3aXRoIGFuaW1hdGlvbiBjb2RlXG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICBjb25zdCBzdGFyR3JvdXBzID0gY3JlYXRlU3RhckZpZWxkKCk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIHBsYW5ldCAob24gdGhlIHJpZ2h0IHNpZGUpXG4gICAgICAgIGNvbnN0IHBsYW5ldEdlb21ldHJ5ID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KDEyLCA2NCwgNjQpO1xuICAgICAgICBjb25zdCBwbGFuZXRNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7XG4gICAgICAgICAgICBtYXA6IG5ldyBUSFJFRS5UZXh0dXJlTG9hZGVyKCkubG9hZCgnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL21yZG9vYi90aHJlZS5qcy9kZXYvZXhhbXBsZXMvdGV4dHVyZXMvcGxhbmV0cy9lYXJ0aF9hdG1vc18yMDQ4LmpwZycpLFxuICAgICAgICAgICAgYnVtcE1hcDogbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoKS5sb2FkKCdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vbXJkb29iL3RocmVlLmpzL2Rldi9leGFtcGxlcy90ZXh0dXJlcy9wbGFuZXRzL2VhcnRoX25vcm1hbF8yMDQ4LmpwZycpLFxuICAgICAgICAgICAgYnVtcFNjYWxlOiAwLjA1LFxuICAgICAgICAgICAgc3BlY3VsYXJNYXA6IG5ldyBUSFJFRS5UZXh0dXJlTG9hZGVyKCkubG9hZCgnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL21yZG9vYi90aHJlZS5qcy9kZXYvZXhhbXBsZXMvdGV4dHVyZXMvcGxhbmV0cy9lYXJ0aF9zcGVjdWxhcl8yMDQ4LmpwZycpLFxuICAgICAgICAgICAgc3BlY3VsYXI6IG5ldyBUSFJFRS5Db2xvcignZ3JleScpLFxuICAgICAgICAgICAgc2hpbmluZXNzOiAxNVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcGxhbmV0ID0gbmV3IFRIUkVFLk1lc2gocGxhbmV0R2VvbWV0cnksIHBsYW5ldE1hdGVyaWFsKTtcbiAgICAgICAgcGxhbmV0LnBvc2l0aW9uLnNldCgyMCwgMCwgMzApO1xuICAgICAgICBzY2VuZS5hZGQocGxhbmV0KTtcblxuICAgICAgICAvLyBBZGQgcGxhbnQtbGlrZSBhdG1vc3BoZXJlXG4gICAgICAgIGNvbnN0IGF0bW9zcGhlcmVHZW9tZXRyeSA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeSgxMi40LCA2NCwgNjQpO1xuICAgICAgICBjb25zdCBhdG1vc3BoZXJlTWF0ZXJpYWwgPSBuZXcgVEhSRUUuU2hhZGVyTWF0ZXJpYWwoe1xuICAgICAgICAgICAgdHJhbnNwYXJlbnQ6IHRydWUsXG4gICAgICAgICAgICBzaWRlOiBUSFJFRS5CYWNrU2lkZSxcbiAgICAgICAgICAgIHZlcnRleFNoYWRlcjogYFxuICAgICAgICAgICAgICAgIHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xuICAgICAgICAgICAgICAgIHZvaWQgbWFpbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdk5vcm1hbCA9IG5vcm1hbGl6ZShub3JtYWxNYXRyaXggKiBub3JtYWwpO1xuICAgICAgICAgICAgICAgICAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KHBvc2l0aW9uLCAxLjApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGAsXG4gICAgICAgICAgICBmcmFnbWVudFNoYWRlcjogYFxuICAgICAgICAgICAgICAgIHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xuICAgICAgICAgICAgICAgIHZvaWQgbWFpbigpIHtcbiAgICAgICAgICAgICAgICAgICAgZmxvYXQgaW50ZW5zaXR5ID0gcG93KDAuNyAtIGRvdCh2Tm9ybWFsLCB2ZWMzKDAuMCwgMC4wLCAxLjApKSwgMi4wKTtcbiAgICAgICAgICAgICAgICAgICAgZ2xfRnJhZ0NvbG9yID0gdmVjNCgwLjQsIDAuOCwgMC40LCAxLjApICogaW50ZW5zaXR5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGBcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGF0bW9zcGhlcmUgPSBuZXcgVEhSRUUuTWVzaChhdG1vc3BoZXJlR2VvbWV0cnksIGF0bW9zcGhlcmVNYXRlcmlhbCk7XG4gICAgICAgIGF0bW9zcGhlcmUucG9zaXRpb24uY29weShwbGFuZXQucG9zaXRpb24pOyAvLyBNYXRjaCBwbGFuZXQgcG9zaXRpb24gZXhhY3RseVxuICAgICAgICBzY2VuZS5hZGQoYXRtb3NwaGVyZSk7XG5cbiAgICAgICAgLy8gQ2FtZXJhIHBvc2l0aW9uIC0gYWRqdXN0ZWQgZm9yIHRoZSBtdWNoIGxhcmdlciBhbmQgZnVydGhlci1yaWdodCBwbGFuZXRcbiAgICAgICAgY2FtZXJhLnBvc2l0aW9uLnNldCgtMjAsIDAsIDI1KTtcbiAgICAgICAgLy8gTG9vayBhdCBhIHBvaW50IG11Y2ggZnVydGhlciB0byB0aGUgcmlnaHRcbiAgICAgICAgY2FtZXJhLmxvb2tBdChuZXcgVEhSRUUuVmVjdG9yMyg2MCwgMCwgMCkpO1xuXG4gICAgICAgIC8vIEFuaW1hdGlvblxuICAgICAgICBmdW5jdGlvbiBhbmltYXRlKCkge1xuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBLZWVwIGF0bW9zcGhlcmUgd2l0aCBwbGFuZXRcbiAgICAgICAgICAgIGF0bW9zcGhlcmUucG9zaXRpb24uY29weShwbGFuZXQucG9zaXRpb24pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBSb3RhdGUgc3RhciBmaWVsZHMgc2xpZ2h0bHkgZm9yIHN1YnRsZSBtb3ZlbWVudFxuICAgICAgICAgICAgc3Rhckdyb3Vwcy5mb3JFYWNoKChzdGFycywgaSkgPT4ge1xuICAgICAgICAgICAgICAgIHN0YXJzLnJvdGF0aW9uLnkgKz0gMC4wMDAxICogKGkgKyAxKTtcbiAgICAgICAgICAgICAgICBzdGFycy5yb3RhdGlvbi54ICs9IDAuMDAwMDUgKiAoaSArIDEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJlbmRlcmVyLnJlbmRlcihzY2VuZSwgY2FtZXJhKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gSGFuZGxlIHdoZWVsIGV2ZW50cyBmb3Igcm90YXRpb24gLSB0aGlzIGlzIG1vcmUgZGlyZWN0IHRoYW4gc2Nyb2xsXG4gICAgICAgIGNvbnN0IGhhbmRsZVdoZWVsID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAvLyBEZXRlcm1pbmUgZGlyZWN0aW9uIGFuZCBmb3JjZSBvZiB3aGVlbCBldmVudFxuICAgICAgICAgICAgY29uc3QgZGVsdGEgPSBldmVudC5kZWx0YVk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEFwcGx5IHJvdGF0aW9uIGRpcmVjdGx5IHRvIHRoZSBwbGFuZXRcbiAgICAgICAgICAgIHBsYW5ldC5yb3RhdGlvbi55ICs9IGRlbHRhICogMC4wMDI7XG4gICAgICAgICAgICBhdG1vc3BoZXJlLnJvdGF0aW9uLnkgPSBwbGFuZXQucm90YXRpb24ueTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gTW92ZSBwbGFuZXQgY2xvc2VyIChkZWNyZWFzZSB6KSBhcyBpdCByb3RhdGVzXG4gICAgICAgICAgICAvLyBPbmx5IGRlY3JlYXNlIHogZG93biB0byBhIG1pbmltdW0gb2YgMFxuICAgICAgICAgICAgY29uc3QgY3VycmVudFogPSBwbGFuZXQucG9zaXRpb24uejtcbiAgICAgICAgICAgIGlmIChjdXJyZW50WiA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBEZWNyZWFzZSB6IHByb3BvcnRpb25hbCB0byByb3RhdGlvbiBhbW91bnQgYnV0IGFsd2F5cyBtb3ZpbmcgZm9yd2FyZFxuICAgICAgICAgICAgICAgIGNvbnN0IHpEZWx0YSA9IE1hdGguYWJzKGRlbHRhKSAqIDAuMDE7XG4gICAgICAgICAgICAgICAgcGxhbmV0LnBvc2l0aW9uLnogPSBNYXRoLm1heCgwLCBjdXJyZW50WiAtIHpEZWx0YSk7XG4gICAgICAgICAgICAgICAgLy8gS2VlcCBhdG1vc3BoZXJlIHdpdGggcGxhbmV0XG4gICAgICAgICAgICAgICAgYXRtb3NwaGVyZS5wb3NpdGlvbi5jb3B5KHBsYW5ldC5wb3NpdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICAvLyBUcmFjayB0b3VjaCBwb3NpdGlvbiBmb3IgbW9iaWxlIGRldmljZXNcbiAgICAgICAgbGV0IHRvdWNoU3RhcnRZID0gMDtcbiAgICAgICAgXG4gICAgICAgIC8vIEhhbmRsZSB0b3VjaCBldmVudHMgZm9yIG1vYmlsZVxuICAgICAgICBjb25zdCBoYW5kbGVUb3VjaFN0YXJ0ID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0b3VjaFN0YXJ0WSA9IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGhhbmRsZVRvdWNoTW92ZSA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgLy8gU2tpcCBpZiBubyBzdGFydGluZyBwb3NpdGlvblxuICAgICAgICAgICAgaWYgKHRvdWNoU3RhcnRZID09PSAwKSByZXR1cm47XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBkZWx0YSAobmVnYXRpdmUgdG8gbWF0Y2ggd2hlZWwgZGlyZWN0aW9uKVxuICAgICAgICAgICAgY29uc3QgdG91Y2hEZWx0YSA9IC0oZXZlbnQudG91Y2hlc1swXS5jbGllbnRZIC0gdG91Y2hTdGFydFkpICogMTA7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEFwcGx5IHJvdGF0aW9uIGp1c3QgbGlrZSB3aXRoIHdoZWVsIGV2ZW50c1xuICAgICAgICAgICAgcGxhbmV0LnJvdGF0aW9uLnkgKz0gdG91Y2hEZWx0YSAqIDAuMDAyO1xuICAgICAgICAgICAgYXRtb3NwaGVyZS5yb3RhdGlvbi55ID0gcGxhbmV0LnJvdGF0aW9uLnk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIE1vdmUgcGxhbmV0IGNsb3NlciAoZGVjcmVhc2UgeikgYXMgaXQgcm90YXRlc1xuICAgICAgICAgICAgLy8gT25seSBkZWNyZWFzZSB6IGRvd24gdG8gYSBtaW5pbXVtIG9mIDBcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRaID0gcGxhbmV0LnBvc2l0aW9uLno7XG4gICAgICAgICAgICBpZiAoY3VycmVudFogPiAwKSB7XG4gICAgICAgICAgICAgICAgLy8gRGVjcmVhc2UgeiBwcm9wb3J0aW9uYWwgdG8gcm90YXRpb24gYW1vdW50IGJ1dCBhbHdheXMgbW92aW5nIGZvcndhcmRcbiAgICAgICAgICAgICAgICBjb25zdCB6RGVsdGEgPSBNYXRoLmFicyh0b3VjaERlbHRhKSAqIDAuMDE7XG4gICAgICAgICAgICAgICAgcGxhbmV0LnBvc2l0aW9uLnogPSBNYXRoLm1heCgwLCBjdXJyZW50WiAtIHpEZWx0YSk7XG4gICAgICAgICAgICAgICAgLy8gS2VlcCBhdG1vc3BoZXJlIHdpdGggcGxhbmV0XG4gICAgICAgICAgICAgICAgYXRtb3NwaGVyZS5wb3NpdGlvbi5jb3B5KHBsYW5ldC5wb3NpdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBzdGFydCBwb3NpdGlvblxuICAgICAgICAgICAgdG91Y2hTdGFydFkgPSBldmVudC50b3VjaGVzWzBdLmNsaWVudFk7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICBjb25zdCBoYW5kbGVUb3VjaEVuZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRvdWNoU3RhcnRZID0gMDtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBIYW5kbGUgc2Nyb2xsIGV2ZW50cyB0byB1cGRhdGUgcGxhbmV0IHBvc2l0aW9uXG4gICAgICAgIGNvbnN0IGhhbmRsZVNjcm9sbCA9ICgpID0+IHtcbiAgICAgICAgICAgIC8vIEdldCBjdXJyZW50IHNjcm9sbCBwb3NpdGlvbiBhcyBwZXJjZW50YWdlIG9mIHBhZ2UgaGVpZ2h0XG4gICAgICAgICAgICBjb25zdCBzY3JvbGxIZWlnaHQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0IC0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICAgICAgY29uc3Qgc2Nyb2xsVG9wID0gd2luZG93LnNjcm9sbFkgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDtcbiAgICAgICAgICAgIGNvbnN0IHNjcm9sbFBlcmNlbnQgPSBNYXRoLm1pbihzY3JvbGxUb3AgLyBzY3JvbGxIZWlnaHQsIDEpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgeC1wb3NpdGlvbjogMjAgYXQgdG9wIG9mIHBhZ2UsIGdyYWR1YWxseSBpbmNyZWFzaW5nIHRvIDEwMCBhcyB3ZSBzY3JvbGxcbiAgICAgICAgICAgIGxldCB4UG9zID0gMjA7XG4gICAgICAgICAgICBpZiAoc2Nyb2xsUGVyY2VudCA+IDAuMSkge1xuICAgICAgICAgICAgICAgIC8vIE1hcCAxMCUtNzAlIHNjcm9sbCB0byBmdWxsIHgtcG9zaXRpb24gY2hhbmdlICgyMCB0byAxMDApXG4gICAgICAgICAgICAgICAgY29uc3QgeFNjcm9sbFBlcmNlbnQgPSBNYXRoLm1pbigoc2Nyb2xsUGVyY2VudCAtIDAuMSkgLyAwLjYsIDEpO1xuICAgICAgICAgICAgICAgIHhQb3MgPSAyMCArICg4MCAqIHhTY3JvbGxQZXJjZW50KTsgLy8gTW92ZSBmcm9tIDIwIHRvIDEwMFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBVcGRhdGUgT05MWSB0aGUgeCBwb3NpdGlvbiBvZiB0aGUgcGxhbmV0LCBwcmVzZXJ2aW5nIHogcG9zaXRpb25cbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRaID0gcGxhbmV0LnBvc2l0aW9uLno7XG4gICAgICAgICAgICBwbGFuZXQucG9zaXRpb24uc2V0KHhQb3MsIDAsIGN1cnJlbnRaKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBIYW5kbGUgd2luZG93IHJlc2l6ZVxuICAgICAgICBjb25zdCBoYW5kbGVSZXNpemUgPSAoKSA9PiB7XG4gICAgICAgICAgICBjYW1lcmEuYXNwZWN0ID0gd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICAgICAgICBjYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuICAgICAgICAgICAgcmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gVXBkYXRlIHBsYW5ldCBwb3NpdGlvbiBvbiByZXNpemUgdG9vXG4gICAgICAgICAgICBoYW5kbGVTY3JvbGwoKTtcbiAgICAgICAgfTtcblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGhhbmRsZVNjcm9sbCwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gQWRkIHdoZWVsIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBjb250YWluZXJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3doZWVsJywgaGFuZGxlV2hlZWwsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFkZCB0b3VjaCBldmVudHMgZm9yIG1vYmlsZVxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZVRvdWNoU3RhcnQsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIGhhbmRsZVRvdWNoTW92ZSwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBoYW5kbGVUb3VjaEVuZCwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gSW5pdGlhbCByb3RhdGlvbiBzbyBFYXJ0aCBpcyB2aXNpYmxlXG4gICAgICAgIHBsYW5ldC5yb3RhdGlvbi55ID0gMC41O1xuICAgICAgICBhdG1vc3BoZXJlLnJvdGF0aW9uLnkgPSAwLjU7XG4gICAgICAgIFxuICAgICAgICAvLyBTdGFydCBhbmltYXRpb25cbiAgICAgICAgYW5pbWF0ZSgpO1xuXG4gICAgICAgIC8vIENyZWF0ZSBhbiBJbnRlcnNlY3Rpb25PYnNlcnZlciB0byByb3RhdGUgdGhlIHBsYW5ldCB3aGVuIHBhZ2Ugc2VjdGlvbnMgY29tZSBpbnRvIHZpZXdcbiAgICAgICAgLy8gVGhpcyBwcm92aWRlcyBhIGJhY2t1cCBtZXRob2QgaW4gY2FzZSB3aGVlbCBldmVudHMgZG9uJ3Qgd29yayB3ZWxsXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2VjdGlvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzZWN0aW9uJyk7XG4gICAgICAgICAgICBpZiAoc2VjdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50U2VjdGlvbkluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zdCBzZWN0aW9uT2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJpZXMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgc2VjdGlvbiBpbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlY3Rpb24gPSBlbnRyeS50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBBcnJheS5mcm9tKHNlY3Rpb25zKS5pbmRleE9mKHNlY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERldGVybWluZSByb3RhdGlvbiBiYXNlZCBvbiBzZWN0aW9uIGluZGV4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRW5zdXJlIHdlIG9ubHkgcm90YXRlIGlmIHdlJ3JlIG1vdmluZyB0byBhIG5ldyBzZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSBjdXJyZW50U2VjdGlvbkluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJvdGF0ZSAxLzQgdHVybiBwZXIgc2VjdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFuZXQucm90YXRpb24ueSA9IE1hdGguUEkgLyAyICogaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0bW9zcGhlcmUucm90YXRpb24ueSA9IHBsYW5ldC5yb3RhdGlvbi55O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2VjdGlvbkluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LCB7IHRocmVzaG9sZDogMC4zIH0pOyAvLyBUcmlnZ2VyIHdoZW4gMzAlIG9mIHNlY3Rpb24gaXMgdmlzaWJsZVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIE9ic2VydmUgYWxsIHNlY3Rpb25zXG4gICAgICAgICAgICAgICAgc2VjdGlvbnMuZm9yRWFjaChzZWN0aW9uID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VjdGlvbk9ic2VydmVyLm9ic2VydmUoc2VjdGlvbik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDEwMDApOyAvLyBXYWl0IGZvciBzZWN0aW9ucyB0byBiZSByZWFkeVxuXG4gICAgICAgIC8vIENsZWFudXBcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3doZWVsJywgaGFuZGxlV2hlZWwpO1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBoYW5kbGVUb3VjaFN0YXJ0KTtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBoYW5kbGVUb3VjaE1vdmUpO1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgaGFuZGxlVG91Y2hFbmQpO1xuICAgICAgICAgICAgY29udGFpbmVyUmVmLmN1cnJlbnQ/LnJlbW92ZUNoaWxkKHJlbmRlcmVyLmRvbUVsZW1lbnQpO1xuICAgICAgICAgICAgcmVuZGVyZXIuZGlzcG9zZSgpO1xuICAgICAgICB9O1xuICAgIH0sIFtdKTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgXG4gICAgICAgICAgICByZWY9e2NvbnRhaW5lclJlZn0gXG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICAgICAgekluZGV4OiAxXG4gICAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgICk7XG59ICJdLCJuYW1lcyI6WyJ1c2VFZmZlY3QiLCJ1c2VSZWYiLCJUSFJFRSIsIlBsYW5ldFNjZW5lIiwiY29udGFpbmVyUmVmIiwiY3VycmVudCIsInNjZW5lIiwiU2NlbmUiLCJmb2ciLCJGb2dFeHAyIiwiY2FtZXJhIiwiUGVyc3BlY3RpdmVDYW1lcmEiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJyZW5kZXJlciIsIldlYkdMUmVuZGVyZXIiLCJhbnRpYWxpYXMiLCJhbHBoYSIsInNldFNpemUiLCJzZXRDbGVhckNvbG9yIiwidG9uZU1hcHBpbmciLCJBQ0VTRmlsbWljVG9uZU1hcHBpbmciLCJ0b25lTWFwcGluZ0V4cG9zdXJlIiwiYXBwZW5kQ2hpbGQiLCJkb21FbGVtZW50IiwiYW1iaWVudExpZ2h0IiwiQW1iaWVudExpZ2h0IiwiYWRkIiwicG9pbnRMaWdodCIsIlBvaW50TGlnaHQiLCJwb3NpdGlvbiIsInNldCIsInBvaW50TGlnaHQyIiwiY3JlYXRlU3RhckZpZWxkIiwic3RhckNvdW50IiwiZ2VvbWV0cnkiLCJCdWZmZXJHZW9tZXRyeSIsInBvc2l0aW9ucyIsIkZsb2F0MzJBcnJheSIsImkiLCJNYXRoIiwicmFuZG9tIiwic2V0QXR0cmlidXRlIiwiQnVmZmVyQXR0cmlidXRlIiwibWF0ZXJpYWwiLCJQb2ludHNNYXRlcmlhbCIsImNvbG9yIiwic2l6ZSIsInRyYW5zcGFyZW50Iiwib3BhY2l0eSIsInN0YXJzIiwiUG9pbnRzIiwic3Rhckdyb3VwcyIsInBsYW5ldEdlb21ldHJ5IiwiU3BoZXJlR2VvbWV0cnkiLCJwbGFuZXRNYXRlcmlhbCIsIk1lc2hQaG9uZ01hdGVyaWFsIiwibWFwIiwiVGV4dHVyZUxvYWRlciIsImxvYWQiLCJidW1wTWFwIiwiYnVtcFNjYWxlIiwic3BlY3VsYXJNYXAiLCJzcGVjdWxhciIsIkNvbG9yIiwic2hpbmluZXNzIiwicGxhbmV0IiwiTWVzaCIsImF0bW9zcGhlcmVHZW9tZXRyeSIsImF0bW9zcGhlcmVNYXRlcmlhbCIsIlNoYWRlck1hdGVyaWFsIiwic2lkZSIsIkJhY2tTaWRlIiwidmVydGV4U2hhZGVyIiwiZnJhZ21lbnRTaGFkZXIiLCJhdG1vc3BoZXJlIiwiY29weSIsImxvb2tBdCIsIlZlY3RvcjMiLCJhbmltYXRlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZm9yRWFjaCIsInJvdGF0aW9uIiwieSIsIngiLCJyZW5kZXIiLCJoYW5kbGVXaGVlbCIsImV2ZW50IiwiZGVsdGEiLCJkZWx0YVkiLCJjdXJyZW50WiIsInoiLCJ6RGVsdGEiLCJhYnMiLCJtYXgiLCJ0b3VjaFN0YXJ0WSIsImhhbmRsZVRvdWNoU3RhcnQiLCJ0b3VjaGVzIiwiY2xpZW50WSIsImhhbmRsZVRvdWNoTW92ZSIsInRvdWNoRGVsdGEiLCJoYW5kbGVUb3VjaEVuZCIsImhhbmRsZVNjcm9sbCIsInNjcm9sbEhlaWdodCIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwic2Nyb2xsVG9wIiwic2Nyb2xsWSIsInNjcm9sbFBlcmNlbnQiLCJtaW4iLCJ4UG9zIiwieFNjcm9sbFBlcmNlbnQiLCJoYW5kbGVSZXNpemUiLCJhc3BlY3QiLCJ1cGRhdGVQcm9qZWN0aW9uTWF0cml4IiwiYWRkRXZlbnRMaXN0ZW5lciIsInBhc3NpdmUiLCJzZXRUaW1lb3V0Iiwic2VjdGlvbnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwibGVuZ3RoIiwiY3VycmVudFNlY3Rpb25JbmRleCIsInNlY3Rpb25PYnNlcnZlciIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiZW50cmllcyIsImVudHJ5IiwiaXNJbnRlcnNlY3RpbmciLCJzZWN0aW9uIiwidGFyZ2V0IiwiaW5kZXgiLCJBcnJheSIsImZyb20iLCJpbmRleE9mIiwiUEkiLCJ0aHJlc2hvbGQiLCJvYnNlcnZlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlbW92ZUNoaWxkIiwiZGlzcG9zZSIsImRpdiIsInJlZiIsInN0eWxlIiwidG9wIiwibGVmdCIsIndpZHRoIiwiaGVpZ2h0IiwiekluZGV4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/PlanetScene.tsx\n"));

/***/ })

});