"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/PlanetScene.tsx":
/*!****************************************!*\
  !*** ./src/components/PlanetScene.tsx ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ PlanetScene; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.module.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\nfunction PlanetScene() {\n    _s();\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!containerRef.current) return;\n        // Scene setup\n        const scene = new three__WEBPACK_IMPORTED_MODULE_2__.Scene();\n        // Add fog for depth\n        scene.fog = new three__WEBPACK_IMPORTED_MODULE_2__.FogExp2(0x000511, 0.01);\n        // Use a wider field of view to capture more of the scene\n        const camera = new three__WEBPACK_IMPORTED_MODULE_2__.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 1000);\n        // Enhanced renderer with better shadows\n        const renderer = new three__WEBPACK_IMPORTED_MODULE_2__.WebGLRenderer({\n            antialias: true,\n            alpha: true\n        });\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.setClearColor(0x000511);\n        renderer.toneMapping = three__WEBPACK_IMPORTED_MODULE_2__.ACESFilmicToneMapping;\n        renderer.toneMappingExposure = 1.2;\n        containerRef.current.appendChild(renderer.domElement);\n        // Enhanced Lighting\n        const ambientLight = new three__WEBPACK_IMPORTED_MODULE_2__.AmbientLight(0xffffff, 0.8);\n        scene.add(ambientLight);\n        const pointLight = new three__WEBPACK_IMPORTED_MODULE_2__.PointLight(0xffffff, 2);\n        pointLight.position.set(25, 5, 15); // Position light to illuminate planet from right\n        scene.add(pointLight);\n        // Add a second point light for better illumination\n        const pointLight2 = new three__WEBPACK_IMPORTED_MODULE_2__.PointLight(0xc4f1de, 1.5);\n        pointLight2.position.set(-10, -5, -5);\n        scene.add(pointLight2);\n        // Create stars - simple and spread throughout the scene\n        const createStarField = ()=>{\n            const starCount = 3000;\n            const geometry = new three__WEBPACK_IMPORTED_MODULE_2__.BufferGeometry();\n            const positions = new Float32Array(starCount * 3);\n            // Create stars with a wider distribution\n            for(let i = 0; i < starCount; i++){\n                // Distribute stars in a cube formation that extends well beyond the camera view\n                positions[i * 3] = (Math.random() - 0.5) * 200;\n                positions[i * 3 + 1] = (Math.random() - 0.5) * 200;\n                positions[i * 3 + 2] = (Math.random() - 0.5) * 200;\n            }\n            geometry.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_2__.BufferAttribute(positions, 3));\n            // Use a single star size instead of different sizes\n            const material = new three__WEBPACK_IMPORTED_MODULE_2__.PointsMaterial({\n                color: 0xffffff,\n                size: 0.2,\n                transparent: true,\n                opacity: 0.8\n            });\n            const stars = new three__WEBPACK_IMPORTED_MODULE_2__.Points(geometry, material);\n            scene.add(stars);\n            return [\n                stars\n            ]; // Return as an array to maintain compatibility with animation code\n        };\n        const starGroups = createStarField();\n        // Create planet (on the right side)\n        const planetGeometry = new three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry(12, 64, 64);\n        const planetMaterial = new three__WEBPACK_IMPORTED_MODULE_2__.MeshPhongMaterial({\n            map: new three__WEBPACK_IMPORTED_MODULE_2__.TextureLoader().load(\"https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/planets/earth_atmos_2048.jpg\"),\n            bumpMap: new three__WEBPACK_IMPORTED_MODULE_2__.TextureLoader().load(\"https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/planets/earth_normal_2048.jpg\"),\n            bumpScale: 0.05,\n            specularMap: new three__WEBPACK_IMPORTED_MODULE_2__.TextureLoader().load(\"https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/textures/planets/earth_specular_2048.jpg\"),\n            specular: new three__WEBPACK_IMPORTED_MODULE_2__.Color(\"grey\"),\n            shininess: 15\n        });\n        const planet = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(planetGeometry, planetMaterial);\n        scene.add(planet);\n        // Add plant-like atmosphere\n        const atmosphereGeometry = new three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry(12.4, 64, 64);\n        const atmosphereMaterial = new three__WEBPACK_IMPORTED_MODULE_2__.ShaderMaterial({\n            transparent: true,\n            side: three__WEBPACK_IMPORTED_MODULE_2__.BackSide,\n            vertexShader: \"\\n                varying vec3 vNormal;\\n                void main() {\\n                    vNormal = normalize(normalMatrix * normal);\\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n                }\\n            \",\n            fragmentShader: \"\\n                varying vec3 vNormal;\\n                void main() {\\n                    float intensity = pow(0.7 - dot(vNormal, vec3(0.0, 0.0, 1.0)), 2.0);\\n                    gl_FragColor = vec4(0.4, 0.8, 0.4, 1.0) * intensity;\\n                }\\n            \"\n        });\n        const atmosphere = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(atmosphereGeometry, atmosphereMaterial);\n        scene.add(atmosphere);\n        // Camera position - adjusted for the much larger and further-right planet\n        camera.position.set(-20, 0, 25);\n        // Look at a point much further to the right\n        camera.lookAt(new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(60, 0, 0));\n        // Animation\n        // Track target positions for smoother interpolation\n        let targetX = 20;\n        let targetZ = 30;\n        const interpolationSpeed = 0.05; // Controls smoothness of transitions\n        function animate() {\n            requestAnimationFrame(animate);\n            // Smoothly interpolate current position toward target position\n            const currentX = planet.position.x;\n            const currentZ = planet.position.z;\n            // Interpolate X position (right movement)\n            if (Math.abs(targetX - currentX) > 0.01) {\n                planet.position.x += (targetX - currentX) * interpolationSpeed;\n            }\n            // Interpolate Z position (distance)\n            if (Math.abs(targetZ - currentZ) > 0.01) {\n                planet.position.z += (targetZ - currentZ) * interpolationSpeed;\n            }\n            // Keep atmosphere with planet\n            atmosphere.position.copy(planet.position);\n            // Rotate star fields slightly for subtle movement\n            starGroups.forEach((stars, i)=>{\n                stars.rotation.y += 0.0001 * (i + 1);\n                stars.rotation.x += 0.00005 * (i + 1);\n            });\n            renderer.render(scene, camera);\n        }\n        // Handle wheel events for rotation - this is more direct than scroll\n        const handleWheel = (event)=>{\n            // Determine direction and force of wheel event\n            const delta = event.deltaY;\n            // Apply rotation directly to the planet\n            planet.rotation.y += delta * 0.002;\n            atmosphere.rotation.y = planet.rotation.y;\n            // Check scroll direction\n            if (delta > 0) {\n                // Scrolling down - move planet closer (decrease z) - faster\n                if (targetZ > 0) {\n                    // Decrease z proportional to rotation amount but always moving forward\n                    const zDelta = Math.abs(delta) * 0.03; // Increased from 0.01 to 0.03\n                    targetZ = Math.max(0, targetZ - zDelta);\n                }\n            } else if (delta < 0) {\n                // Scrolling up - move planet farther (increase z)\n                if (targetZ < 30) {\n                    // Increase z proportional to rotation amount\n                    const zDelta = Math.abs(delta) * 0.03; // Increased from 0.01 to 0.03\n                    targetZ = Math.min(30, targetZ + zDelta);\n                }\n            }\n        };\n        // Track touch position for mobile devices\n        let touchStartY = 0;\n        // Handle touch events for mobile\n        const handleTouchStart = (event)=>{\n            touchStartY = event.touches[0].clientY;\n        };\n        const handleTouchMove = (event)=>{\n            // Skip if no starting position\n            if (touchStartY === 0) return;\n            // Calculate delta (negative to match wheel direction)\n            const touchDelta = -(event.touches[0].clientY - touchStartY) * 10;\n            // Apply rotation just like with wheel events\n            planet.rotation.y += touchDelta * 0.002;\n            atmosphere.rotation.y = planet.rotation.y;\n            // Check scroll direction\n            if (touchDelta > 0) {\n                // Scrolling down - move planet closer (decrease z)\n                if (targetZ > 0) {\n                    // Decrease z proportional to rotation amount\n                    const zDelta = Math.abs(touchDelta) * 0.03; // Increased from 0.01 to 0.03\n                    targetZ = Math.max(0, targetZ - zDelta);\n                }\n            } else if (touchDelta < 0) {\n                // Scrolling up - move planet farther (increase z)\n                if (targetZ < 30) {\n                    // Increase z proportional to rotation amount\n                    const zDelta = Math.abs(touchDelta) * 0.03; // Increased from 0.01 to 0.03\n                    targetZ = Math.min(30, targetZ + zDelta);\n                }\n            }\n            // Update start position\n            touchStartY = event.touches[0].clientY;\n        };\n        const handleTouchEnd = ()=>{\n            touchStartY = 0;\n        };\n        // Handle scroll events to update planet position\n        const handleScroll = ()=>{\n            // Get current scroll position as percentage of page height\n            const scrollHeight = document.documentElement.scrollHeight - window.innerHeight;\n            const scrollTop = window.scrollY || document.documentElement.scrollTop;\n            const scrollPercent = Math.min(scrollTop / scrollHeight, 1);\n            // Calculate x-position: 20 at top of page, gradually increasing to 100 as we scroll\n            let xPos = 20;\n            if (scrollPercent > 0.1) {\n                // Map 10%-30% scroll to full x-position change (20 to 100) - much faster\n                // Decreased from 0.4 to 0.2 to make it move even faster\n                const xScrollPercent = Math.min((scrollPercent - 0.1) / 0.2, 1);\n                xPos = 20 + 80 * xScrollPercent; // Move from 20 to 100\n            }\n            // Update target X position - actual movement happens in animation loop\n            targetX = xPos;\n        };\n        // Handle window resize\n        const handleResize = ()=>{\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n            // Update planet position on resize too\n            handleScroll();\n        };\n        window.addEventListener(\"resize\", handleResize);\n        window.addEventListener(\"scroll\", handleScroll, {\n            passive: true\n        });\n        // Add wheel event listener to the container\n        window.addEventListener(\"wheel\", handleWheel, {\n            passive: true\n        });\n        // Add touch events for mobile\n        window.addEventListener(\"touchstart\", handleTouchStart, {\n            passive: true\n        });\n        window.addEventListener(\"touchmove\", handleTouchMove, {\n            passive: true\n        });\n        window.addEventListener(\"touchend\", handleTouchEnd, {\n            passive: true\n        });\n        // Initial rotation so Earth is visible\n        planet.rotation.y = 0.5;\n        atmosphere.rotation.y = 0.5;\n        // Set initial planet position\n        planet.position.set(20, 0, 30);\n        atmosphere.position.copy(planet.position);\n        // Start animation\n        animate();\n        // Create an IntersectionObserver to rotate the planet when page sections come into view\n        // This provides a backup method in case wheel events don't work well\n        setTimeout(()=>{\n            const sections = document.querySelectorAll(\"section\");\n            if (sections.length > 0) {\n                let currentSectionIndex = 0;\n                const sectionObserver = new IntersectionObserver((entries)=>{\n                    entries.forEach((entry)=>{\n                        if (entry.isIntersecting) {\n                            // Get the section index\n                            const section = entry.target;\n                            const index = Array.from(sections).indexOf(section);\n                            // Determine rotation based on section index\n                            // Ensure we only rotate if we're moving to a new section\n                            if (index !== currentSectionIndex) {\n                                // Rotate 1/4 turn per section\n                                planet.rotation.y = Math.PI / 2 * index;\n                                atmosphere.rotation.y = planet.rotation.y;\n                                currentSectionIndex = index;\n                            }\n                        }\n                    });\n                }, {\n                    threshold: 0.3\n                }); // Trigger when 30% of section is visible\n                // Observe all sections\n                sections.forEach((section)=>{\n                    sectionObserver.observe(section);\n                });\n            }\n        }, 1000); // Wait for sections to be ready\n        // Cleanup\n        return ()=>{\n            var _containerRef_current;\n            window.removeEventListener(\"resize\", handleResize);\n            window.removeEventListener(\"wheel\", handleWheel);\n            window.removeEventListener(\"touchstart\", handleTouchStart);\n            window.removeEventListener(\"touchmove\", handleTouchMove);\n            window.removeEventListener(\"touchend\", handleTouchEnd);\n            (_containerRef_current = containerRef.current) === null || _containerRef_current === void 0 ? void 0 : _containerRef_current.removeChild(renderer.domElement);\n            renderer.dispose();\n        };\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: containerRef,\n        style: {\n            position: \"fixed\",\n            top: 0,\n            left: 0,\n            width: \"100%\",\n            height: \"100%\",\n            zIndex: 1\n        }\n    }, void 0, false, {\n        fileName: \"/Users/kaistephens/Downloads/code/florAI/webApp/FlorAI/src/components/PlanetScene.tsx\",\n        lineNumber: 323,\n        columnNumber: 9\n    }, this);\n}\n_s(PlanetScene, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c = PlanetScene;\nvar _c;\n$RefreshReg$(_c, \"PlanetScene\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL1BsYW5ldFNjZW5lLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBRTBDO0FBQ1g7QUFHaEIsU0FBU0c7O0lBQ3BCLE1BQU1DLGVBQWVILDZDQUFNQSxDQUFpQjtJQUU1Q0QsZ0RBQVNBLENBQUM7UUFDTixJQUFJLENBQUNJLGFBQWFDLE9BQU8sRUFBRTtRQUUzQixjQUFjO1FBQ2QsTUFBTUMsUUFBUSxJQUFJSix3Q0FBVztRQUU3QixvQkFBb0I7UUFDcEJJLE1BQU1FLEdBQUcsR0FBRyxJQUFJTiwwQ0FBYSxDQUFDLFVBQVU7UUFFeEMseURBQXlEO1FBQ3pELE1BQU1RLFNBQVMsSUFBSVIsb0RBQXVCLENBQUMsSUFBSVUsT0FBT0MsVUFBVSxHQUFHRCxPQUFPRSxXQUFXLEVBQUUsS0FBSztRQUU1Rix3Q0FBd0M7UUFDeEMsTUFBTUMsV0FBVyxJQUFJYixnREFBbUIsQ0FBQztZQUNyQ2UsV0FBVztZQUNYQyxPQUFPO1FBQ1g7UUFDQUgsU0FBU0ksT0FBTyxDQUFDUCxPQUFPQyxVQUFVLEVBQUVELE9BQU9FLFdBQVc7UUFDdERDLFNBQVNLLGFBQWEsQ0FBQztRQUN2QkwsU0FBU00sV0FBVyxHQUFHbkIsd0RBQTJCO1FBQ2xEYSxTQUFTUSxtQkFBbUIsR0FBRztRQUMvQm5CLGFBQWFDLE9BQU8sQ0FBQ21CLFdBQVcsQ0FBQ1QsU0FBU1UsVUFBVTtRQUVwRCxvQkFBb0I7UUFDcEIsTUFBTUMsZUFBZSxJQUFJeEIsK0NBQWtCLENBQUMsVUFBVTtRQUN0REksTUFBTXNCLEdBQUcsQ0FBQ0Y7UUFFVixNQUFNRyxhQUFhLElBQUkzQiw2Q0FBZ0IsQ0FBQyxVQUFVO1FBQ2xEMkIsV0FBV0UsUUFBUSxDQUFDQyxHQUFHLENBQUMsSUFBSSxHQUFHLEtBQUssaURBQWlEO1FBQ3JGMUIsTUFBTXNCLEdBQUcsQ0FBQ0M7UUFFVixtREFBbUQ7UUFDbkQsTUFBTUksY0FBYyxJQUFJL0IsNkNBQWdCLENBQUMsVUFB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O29CQUNKO2dCQUNKLEdBQUc7b0JBQUVLLFdBQVc7Z0JBQUksSUFBSSx5Q0FBeUM7Z0JBRWpFLHVCQUF1QjtnQkFDdkJoQixTQUFTakMsT0FBTyxDQUFDMEMsQ0FBQUE7b0JBQ2JMLGdCQUFnQmEsT0FBTyxDQUFDUjtnQkFDNUI7WUFDSjtRQUNKLEdBQUcsT0FBTyxnQ0FBZ0M7UUFFMUMsVUFBVTtRQUNWLE9BQU87Z0JBTUhoSTtZQUxBUSxPQUFPaUksbUJBQW1CLENBQUMsVUFBVXhCO1lBQ3JDekcsT0FBT2lJLG1CQUFtQixDQUFDLFNBQVMvQztZQUNwQ2xGLE9BQU9pSSxtQkFBbUIsQ0FBQyxjQUFjdkM7WUFDekMxRixPQUFPaUksbUJBQW1CLENBQUMsYUFBYXBDO1lBQ3hDN0YsT0FBT2lJLG1CQUFtQixDQUFDLFlBQVlsQzthQUN2Q3ZHLHdCQUFBQSxhQUFhQyxPQUFPLGNBQXBCRCw0Q0FBQUEsc0JBQXNCMEksV0FBVyxDQUFDL0gsU0FBU1UsVUFBVTtZQUNyRFYsU0FBU2dJLE9BQU87UUFDcEI7SUFDSixHQUFHLEVBQUU7SUFFTCxxQkFDSSw4REFBQ0M7UUFDR0MsS0FBSzdJO1FBQ0w4SSxPQUFPO1lBQ0huSCxVQUFVO1lBQ1ZvSCxLQUFLO1lBQ0xDLE1BQU07WUFDTkMsT0FBTztZQUNQQyxRQUFRO1lBQ1JDLFFBQVE7UUFDWjs7Ozs7O0FBR1o7R0F4VXdCcEo7S0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvUGxhbmV0U2NlbmUudHN4PzlhMTYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbmltcG9ydCB7IE9yYml0Q29udHJvbHMgfSBmcm9tICd0aHJlZS9leGFtcGxlcy9qc20vY29udHJvbHMvT3JiaXRDb250cm9scyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBsYW5ldFNjZW5lKCkge1xuICAgIGNvbnN0IGNvbnRhaW5lclJlZiA9IHVzZVJlZjxIVE1MRGl2RWxlbWVudD4obnVsbCk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIWNvbnRhaW5lclJlZi5jdXJyZW50KSByZXR1cm47XG5cbiAgICAgICAgLy8gU2NlbmUgc2V0dXBcbiAgICAgICAgY29uc3Qgc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFkZCBmb2cgZm9yIGRlcHRoXG4gICAgICAgIHNjZW5lLmZvZyA9IG5ldyBUSFJFRS5Gb2dFeHAyKDB4MDAwNTExLCAwLjAxKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFVzZSBhIHdpZGVyIGZpZWxkIG9mIHZpZXcgdG8gY2FwdHVyZSBtb3JlIG9mIHRoZSBzY2VuZVxuICAgICAgICBjb25zdCBjYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoNjAsIHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0LCAwLjEsIDEwMDApO1xuICAgICAgICBcbiAgICAgICAgLy8gRW5oYW5jZWQgcmVuZGVyZXIgd2l0aCBiZXR0ZXIgc2hhZG93c1xuICAgICAgICBjb25zdCByZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHsgXG4gICAgICAgICAgICBhbnRpYWxpYXM6IHRydWUsXG4gICAgICAgICAgICBhbHBoYTogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgICAgIHJlbmRlcmVyLnNldENsZWFyQ29sb3IoMHgwMDA1MTEpO1xuICAgICAgICByZW5kZXJlci50b25lTWFwcGluZyA9IFRIUkVFLkFDRVNGaWxtaWNUb25lTWFwcGluZztcbiAgICAgICAgcmVuZGVyZXIudG9uZU1hcHBpbmdFeHBvc3VyZSA9IDEuMjtcbiAgICAgICAgY29udGFpbmVyUmVmLmN1cnJlbnQuYXBwZW5kQ2hpbGQocmVuZGVyZXIuZG9tRWxlbWVudCk7XG5cbiAgICAgICAgLy8gRW5oYW5jZWQgTGlnaHRpbmdcbiAgICAgICAgY29uc3QgYW1iaWVudExpZ2h0ID0gbmV3IFRIUkVFLkFtYmllbnRMaWdodCgweGZmZmZmZiwgMC44KTtcbiAgICAgICAgc2NlbmUuYWRkKGFtYmllbnRMaWdodCk7XG5cbiAgICAgICAgY29uc3QgcG9pbnRMaWdodCA9IG5ldyBUSFJFRS5Qb2ludExpZ2h0KDB4ZmZmZmZmLCAyKTtcbiAgICAgICAgcG9pbnRMaWdodC5wb3NpdGlvbi5zZXQoMjUsIDUsIDE1KTsgLy8gUG9zaXRpb24gbGlnaHQgdG8gaWxsdW1pbmF0ZSBwbGFuZXQgZnJvbSByaWdodFxuICAgICAgICBzY2VuZS5hZGQocG9pbnRMaWdodCk7XG5cbiAgICAgICAgLy8gQWRkIGEgc2Vjb25kIHBvaW50IGxpZ2h0IGZvciBiZXR0ZXIgaWxsdW1pbmF0aW9uXG4gICAgICAgIGNvbnN0IHBvaW50TGlnaHQyID0gbmV3IFRIUkVFLlBvaW50TGlnaHQoMHhjNGYxZGUsIDEuNSk7XG4gICAgICAgIHBvaW50TGlnaHQyLnBvc2l0aW9uLnNldCgtMTAsIC01LCAtNSk7XG4gICAgICAgIHNjZW5lLmFkZChwb2ludExpZ2h0Mik7XG5cbiAgICAgICAgLy8gQ3JlYXRlIHN0YXJzIC0gc2ltcGxlIGFuZCBzcHJlYWQgdGhyb3VnaG91dCB0aGUgc2NlbmVcbiAgICAgICAgY29uc3QgY3JlYXRlU3RhckZpZWxkID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3RhckNvdW50ID0gMzAwMDtcbiAgICAgICAgICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCk7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KHN0YXJDb3VudCAqIDMpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDcmVhdGUgc3RhcnMgd2l0aCBhIHdpZGVyIGRpc3RyaWJ1dGlvblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGFyQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIC8vIERpc3RyaWJ1dGUgc3RhcnMgaW4gYSBjdWJlIGZvcm1hdGlvbiB0aGF0IGV4dGVuZHMgd2VsbCBiZXlvbmQgdGhlIGNhbWVyYSB2aWV3XG4gICAgICAgICAgICAgICAgcG9zaXRpb25zW2kgKiAzXSA9IChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDIwMDtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbnNbaSAqIDMgKyAxXSA9IChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDIwMDtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbnNbaSAqIDMgKyAyXSA9IChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDIwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZ2VvbWV0cnkuc2V0QXR0cmlidXRlKCdwb3NpdGlvbicsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUocG9zaXRpb25zLCAzKSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFVzZSBhIHNpbmdsZSBzdGFyIHNpemUgaW5zdGVhZCBvZiBkaWZmZXJlbnQgc2l6ZXNcbiAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLlBvaW50c01hdGVyaWFsKHsgXG4gICAgICAgICAgICAgICAgY29sb3I6IDB4ZmZmZmZmLCBcbiAgICAgICAgICAgICAgICBzaXplOiAwLjIsIC8vIFNtYWxsZXIsIGVxdWFsLXNpemVkIHN0YXJzXG4gICAgICAgICAgICAgICAgdHJhbnNwYXJlbnQ6IHRydWUsIFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuOCBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBzdGFycyA9IG5ldyBUSFJFRS5Qb2ludHMoZ2VvbWV0cnksIG1hdGVyaWFsKTtcbiAgICAgICAgICAgIHNjZW5lLmFkZChzdGFycyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBbc3RhcnNdOyAvLyBSZXR1cm4gYXMgYW4gYXJyYXkgdG8gbWFpbnRhaW4gY29tcGF0aWJpbGl0eSB3aXRoIGFuaW1hdGlvbiBjb2RlXG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICBjb25zdCBzdGFyR3JvdXBzID0gY3JlYXRlU3RhckZpZWxkKCk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIHBsYW5ldCAob24gdGhlIHJpZ2h0IHNpZGUpXG4gICAgICAgIGNvbnN0IHBsYW5ldEdlb21ldHJ5ID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KDEyLCA2NCwgNjQpO1xuICAgICAgICBjb25zdCBwbGFuZXRNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7XG4gICAgICAgICAgICBtYXA6IG5ldyBUSFJFRS5UZXh0dXJlTG9hZGVyKCkubG9hZCgnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL21yZG9vYi90aHJlZS5qcy9kZXYvZXhhbXBsZXMvdGV4dHVyZXMvcGxhbmV0cy9lYXJ0aF9hdG1vc18yMDQ4LmpwZycpLFxuICAgICAgICAgICAgYnVtcE1hcDogbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoKS5sb2FkKCdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vbXJkb29iL3RocmVlLmpzL2Rldi9leGFtcGxlcy90ZXh0dXJlcy9wbGFuZXRzL2VhcnRoX25vcm1hbF8yMDQ4LmpwZycpLFxuICAgICAgICAgICAgYnVtcFNjYWxlOiAwLjA1LFxuICAgICAgICAgICAgc3BlY3VsYXJNYXA6IG5ldyBUSFJFRS5UZXh0dXJlTG9hZGVyKCkubG9hZCgnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL21yZG9vYi90aHJlZS5qcy9kZXYvZXhhbXBsZXMvdGV4dHVyZXMvcGxhbmV0cy9lYXJ0aF9zcGVjdWxhcl8yMDQ4LmpwZycpLFxuICAgICAgICAgICAgc3BlY3VsYXI6IG5ldyBUSFJFRS5Db2xvcignZ3JleScpLFxuICAgICAgICAgICAgc2hpbmluZXNzOiAxNVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcGxhbmV0ID0gbmV3IFRIUkVFLk1lc2gocGxhbmV0R2VvbWV0cnksIHBsYW5ldE1hdGVyaWFsKTtcbiAgICAgICAgc2NlbmUuYWRkKHBsYW5ldCk7XG5cbiAgICAgICAgLy8gQWRkIHBsYW50LWxpa2UgYXRtb3NwaGVyZVxuICAgICAgICBjb25zdCBhdG1vc3BoZXJlR2VvbWV0cnkgPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoMTIuNCwgNjQsIDY0KTtcbiAgICAgICAgY29uc3QgYXRtb3NwaGVyZU1hdGVyaWFsID0gbmV3IFRIUkVFLlNoYWRlck1hdGVyaWFsKHtcbiAgICAgICAgICAgIHRyYW5zcGFyZW50OiB0cnVlLFxuICAgICAgICAgICAgc2lkZTogVEhSRUUuQmFja1NpZGUsXG4gICAgICAgICAgICB2ZXJ0ZXhTaGFkZXI6IGBcbiAgICAgICAgICAgICAgICB2YXJ5aW5nIHZlYzMgdk5vcm1hbDtcbiAgICAgICAgICAgICAgICB2b2lkIG1haW4oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZOb3JtYWwgPSBub3JtYWxpemUobm9ybWFsTWF0cml4ICogbm9ybWFsKTtcbiAgICAgICAgICAgICAgICAgICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbW9kZWxWaWV3TWF0cml4ICogdmVjNChwb3NpdGlvbiwgMS4wKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBgLFxuICAgICAgICAgICAgZnJhZ21lbnRTaGFkZXI6IGBcbiAgICAgICAgICAgICAgICB2YXJ5aW5nIHZlYzMgdk5vcm1hbDtcbiAgICAgICAgICAgICAgICB2b2lkIG1haW4oKSB7XG4gICAgICAgICAgICAgICAgICAgIGZsb2F0IGludGVuc2l0eSA9IHBvdygwLjcgLSBkb3Qodk5vcm1hbCwgdmVjMygwLjAsIDAuMCwgMS4wKSksIDIuMCk7XG4gICAgICAgICAgICAgICAgICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoMC40LCAwLjgsIDAuNCwgMS4wKSAqIGludGVuc2l0eTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBgXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBhdG1vc3BoZXJlID0gbmV3IFRIUkVFLk1lc2goYXRtb3NwaGVyZUdlb21ldHJ5LCBhdG1vc3BoZXJlTWF0ZXJpYWwpO1xuICAgICAgICBzY2VuZS5hZGQoYXRtb3NwaGVyZSk7XG5cbiAgICAgICAgLy8gQ2FtZXJhIHBvc2l0aW9uIC0gYWRqdXN0ZWQgZm9yIHRoZSBtdWNoIGxhcmdlciBhbmQgZnVydGhlci1yaWdodCBwbGFuZXRcbiAgICAgICAgY2FtZXJhLnBvc2l0aW9uLnNldCgtMjAsIDAsIDI1KTtcbiAgICAgICAgLy8gTG9vayBhdCBhIHBvaW50IG11Y2ggZnVydGhlciB0byB0aGUgcmlnaHRcbiAgICAgICAgY2FtZXJhLmxvb2tBdChuZXcgVEhSRUUuVmVjdG9yMyg2MCwgMCwgMCkpO1xuXG4gICAgICAgIC8vIEFuaW1hdGlvblxuICAgICAgICAvLyBUcmFjayB0YXJnZXQgcG9zaXRpb25zIGZvciBzbW9vdGhlciBpbnRlcnBvbGF0aW9uXG4gICAgICAgIGxldCB0YXJnZXRYID0gMjA7XG4gICAgICAgIGxldCB0YXJnZXRaID0gMzA7XG4gICAgICAgIGNvbnN0IGludGVycG9sYXRpb25TcGVlZCA9IDAuMDU7IC8vIENvbnRyb2xzIHNtb290aG5lc3Mgb2YgdHJhbnNpdGlvbnNcbiAgICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIGFuaW1hdGUoKSB7XG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFNtb290aGx5IGludGVycG9sYXRlIGN1cnJlbnQgcG9zaXRpb24gdG93YXJkIHRhcmdldCBwb3NpdGlvblxuICAgICAgICAgICAgY29uc3QgY3VycmVudFggPSBwbGFuZXQucG9zaXRpb24ueDtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRaID0gcGxhbmV0LnBvc2l0aW9uLno7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEludGVycG9sYXRlIFggcG9zaXRpb24gKHJpZ2h0IG1vdmVtZW50KVxuICAgICAgICAgICAgaWYgKE1hdGguYWJzKHRhcmdldFggLSBjdXJyZW50WCkgPiAwLjAxKSB7XG4gICAgICAgICAgICAgICAgcGxhbmV0LnBvc2l0aW9uLnggKz0gKHRhcmdldFggLSBjdXJyZW50WCkgKiBpbnRlcnBvbGF0aW9uU3BlZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEludGVycG9sYXRlIFogcG9zaXRpb24gKGRpc3RhbmNlKVxuICAgICAgICAgICAgaWYgKE1hdGguYWJzKHRhcmdldFogLSBjdXJyZW50WikgPiAwLjAxKSB7XG4gICAgICAgICAgICAgICAgcGxhbmV0LnBvc2l0aW9uLnogKz0gKHRhcmdldFogLSBjdXJyZW50WikgKiBpbnRlcnBvbGF0aW9uU3BlZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEtlZXAgYXRtb3NwaGVyZSB3aXRoIHBsYW5ldFxuICAgICAgICAgICAgYXRtb3NwaGVyZS5wb3NpdGlvbi5jb3B5KHBsYW5ldC5wb3NpdGlvbik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFJvdGF0ZSBzdGFyIGZpZWxkcyBzbGlnaHRseSBmb3Igc3VidGxlIG1vdmVtZW50XG4gICAgICAgICAgICBzdGFyR3JvdXBzLmZvckVhY2goKHN0YXJzLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgc3RhcnMucm90YXRpb24ueSArPSAwLjAwMDEgKiAoaSArIDEpO1xuICAgICAgICAgICAgICAgIHN0YXJzLnJvdGF0aW9uLnggKz0gMC4wMDAwNSAqIChpICsgMSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmVuZGVyZXIucmVuZGVyKHNjZW5lLCBjYW1lcmEpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBIYW5kbGUgd2hlZWwgZXZlbnRzIGZvciByb3RhdGlvbiAtIHRoaXMgaXMgbW9yZSBkaXJlY3QgdGhhbiBzY3JvbGxcbiAgICAgICAgY29uc3QgaGFuZGxlV2hlZWwgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIC8vIERldGVybWluZSBkaXJlY3Rpb24gYW5kIGZvcmNlIG9mIHdoZWVsIGV2ZW50XG4gICAgICAgICAgICBjb25zdCBkZWx0YSA9IGV2ZW50LmRlbHRhWTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQXBwbHkgcm90YXRpb24gZGlyZWN0bHkgdG8gdGhlIHBsYW5ldFxuICAgICAgICAgICAgcGxhbmV0LnJvdGF0aW9uLnkgKz0gZGVsdGEgKiAwLjAwMjtcbiAgICAgICAgICAgIGF0bW9zcGhlcmUucm90YXRpb24ueSA9IHBsYW5ldC5yb3RhdGlvbi55O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDaGVjayBzY3JvbGwgZGlyZWN0aW9uXG4gICAgICAgICAgICBpZiAoZGVsdGEgPiAwKSB7XG4gICAgICAgICAgICAgICAgLy8gU2Nyb2xsaW5nIGRvd24gLSBtb3ZlIHBsYW5ldCBjbG9zZXIgKGRlY3JlYXNlIHopIC0gZmFzdGVyXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldFogPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIERlY3JlYXNlIHogcHJvcG9ydGlvbmFsIHRvIHJvdGF0aW9uIGFtb3VudCBidXQgYWx3YXlzIG1vdmluZyBmb3J3YXJkXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHpEZWx0YSA9IE1hdGguYWJzKGRlbHRhKSAqIDAuMDM7IC8vIEluY3JlYXNlZCBmcm9tIDAuMDEgdG8gMC4wM1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRaID0gTWF0aC5tYXgoMCwgdGFyZ2V0WiAtIHpEZWx0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChkZWx0YSA8IDApIHtcbiAgICAgICAgICAgICAgICAvLyBTY3JvbGxpbmcgdXAgLSBtb3ZlIHBsYW5ldCBmYXJ0aGVyIChpbmNyZWFzZSB6KVxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRaIDwgMzApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSW5jcmVhc2UgeiBwcm9wb3J0aW9uYWwgdG8gcm90YXRpb24gYW1vdW50XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHpEZWx0YSA9IE1hdGguYWJzKGRlbHRhKSAqIDAuMDM7IC8vIEluY3JlYXNlZCBmcm9tIDAuMDEgdG8gMC4wM1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRaID0gTWF0aC5taW4oMzAsIHRhcmdldFogKyB6RGVsdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIC8vIFRyYWNrIHRvdWNoIHBvc2l0aW9uIGZvciBtb2JpbGUgZGV2aWNlc1xuICAgICAgICBsZXQgdG91Y2hTdGFydFkgPSAwO1xuICAgICAgICBcbiAgICAgICAgLy8gSGFuZGxlIHRvdWNoIGV2ZW50cyBmb3IgbW9iaWxlXG4gICAgICAgIGNvbnN0IGhhbmRsZVRvdWNoU3RhcnQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRvdWNoU3RhcnRZID0gZXZlbnQudG91Y2hlc1swXS5jbGllbnRZO1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgY29uc3QgaGFuZGxlVG91Y2hNb3ZlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAvLyBTa2lwIGlmIG5vIHN0YXJ0aW5nIHBvc2l0aW9uXG4gICAgICAgICAgICBpZiAodG91Y2hTdGFydFkgPT09IDApIHJldHVybjtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIGRlbHRhIChuZWdhdGl2ZSB0byBtYXRjaCB3aGVlbCBkaXJlY3Rpb24pXG4gICAgICAgICAgICBjb25zdCB0b3VjaERlbHRhID0gLShldmVudC50b3VjaGVzWzBdLmNsaWVudFkgLSB0b3VjaFN0YXJ0WSkgKiAxMDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQXBwbHkgcm90YXRpb24ganVzdCBsaWtlIHdpdGggd2hlZWwgZXZlbnRzXG4gICAgICAgICAgICBwbGFuZXQucm90YXRpb24ueSArPSB0b3VjaERlbHRhICogMC4wMDI7XG4gICAgICAgICAgICBhdG1vc3BoZXJlLnJvdGF0aW9uLnkgPSBwbGFuZXQucm90YXRpb24ueTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ2hlY2sgc2Nyb2xsIGRpcmVjdGlvblxuICAgICAgICAgICAgaWYgKHRvdWNoRGVsdGEgPiAwKSB7XG4gICAgICAgICAgICAgICAgLy8gU2Nyb2xsaW5nIGRvd24gLSBtb3ZlIHBsYW5ldCBjbG9zZXIgKGRlY3JlYXNlIHopXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldFogPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIERlY3JlYXNlIHogcHJvcG9ydGlvbmFsIHRvIHJvdGF0aW9uIGFtb3VudFxuICAgICAgICAgICAgICAgICAgICBjb25zdCB6RGVsdGEgPSBNYXRoLmFicyh0b3VjaERlbHRhKSAqIDAuMDM7IC8vIEluY3JlYXNlZCBmcm9tIDAuMDEgdG8gMC4wM1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRaID0gTWF0aC5tYXgoMCwgdGFyZ2V0WiAtIHpEZWx0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh0b3VjaERlbHRhIDwgMCkge1xuICAgICAgICAgICAgICAgIC8vIFNjcm9sbGluZyB1cCAtIG1vdmUgcGxhbmV0IGZhcnRoZXIgKGluY3JlYXNlIHopXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldFogPCAzMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJbmNyZWFzZSB6IHByb3BvcnRpb25hbCB0byByb3RhdGlvbiBhbW91bnRcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgekRlbHRhID0gTWF0aC5hYnModG91Y2hEZWx0YSkgKiAwLjAzOyAvLyBJbmNyZWFzZWQgZnJvbSAwLjAxIHRvIDAuMDNcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0WiA9IE1hdGgubWluKDMwLCB0YXJnZXRaICsgekRlbHRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBzdGFydCBwb3NpdGlvblxuICAgICAgICAgICAgdG91Y2hTdGFydFkgPSBldmVudC50b3VjaGVzWzBdLmNsaWVudFk7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICBjb25zdCBoYW5kbGVUb3VjaEVuZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRvdWNoU3RhcnRZID0gMDtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBIYW5kbGUgc2Nyb2xsIGV2ZW50cyB0byB1cGRhdGUgcGxhbmV0IHBvc2l0aW9uXG4gICAgICAgIGNvbnN0IGhhbmRsZVNjcm9sbCA9ICgpID0+IHtcbiAgICAgICAgICAgIC8vIEdldCBjdXJyZW50IHNjcm9sbCBwb3NpdGlvbiBhcyBwZXJjZW50YWdlIG9mIHBhZ2UgaGVpZ2h0XG4gICAgICAgICAgICBjb25zdCBzY3JvbGxIZWlnaHQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0IC0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICAgICAgY29uc3Qgc2Nyb2xsVG9wID0gd2luZG93LnNjcm9sbFkgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDtcbiAgICAgICAgICAgIGNvbnN0IHNjcm9sbFBlcmNlbnQgPSBNYXRoLm1pbihzY3JvbGxUb3AgLyBzY3JvbGxIZWlnaHQsIDEpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgeC1wb3NpdGlvbjogMjAgYXQgdG9wIG9mIHBhZ2UsIGdyYWR1YWxseSBpbmNyZWFzaW5nIHRvIDEwMCBhcyB3ZSBzY3JvbGxcbiAgICAgICAgICAgIGxldCB4UG9zID0gMjA7XG4gICAgICAgICAgICBpZiAoc2Nyb2xsUGVyY2VudCA+IDAuMSkge1xuICAgICAgICAgICAgICAgIC8vIE1hcCAxMCUtMzAlIHNjcm9sbCB0byBmdWxsIHgtcG9zaXRpb24gY2hhbmdlICgyMCB0byAxMDApIC0gbXVjaCBmYXN0ZXJcbiAgICAgICAgICAgICAgICAvLyBEZWNyZWFzZWQgZnJvbSAwLjQgdG8gMC4yIHRvIG1ha2UgaXQgbW92ZSBldmVuIGZhc3RlclxuICAgICAgICAgICAgICAgIGNvbnN0IHhTY3JvbGxQZXJjZW50ID0gTWF0aC5taW4oKHNjcm9sbFBlcmNlbnQgLSAwLjEpIC8gMC4yLCAxKTtcbiAgICAgICAgICAgICAgICB4UG9zID0gMjAgKyAoODAgKiB4U2Nyb2xsUGVyY2VudCk7IC8vIE1vdmUgZnJvbSAyMCB0byAxMDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gVXBkYXRlIHRhcmdldCBYIHBvc2l0aW9uIC0gYWN0dWFsIG1vdmVtZW50IGhhcHBlbnMgaW4gYW5pbWF0aW9uIGxvb3BcbiAgICAgICAgICAgIHRhcmdldFggPSB4UG9zO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEhhbmRsZSB3aW5kb3cgcmVzaXplXG4gICAgICAgIGNvbnN0IGhhbmRsZVJlc2l6ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGNhbWVyYS5hc3BlY3QgPSB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgICAgIGNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG4gICAgICAgICAgICByZW5kZXJlci5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBVcGRhdGUgcGxhbmV0IHBvc2l0aW9uIG9uIHJlc2l6ZSB0b29cbiAgICAgICAgICAgIGhhbmRsZVNjcm9sbCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaGFuZGxlU2Nyb2xsLCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBBZGQgd2hlZWwgZXZlbnQgbGlzdGVuZXIgdG8gdGhlIGNvbnRhaW5lclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCBoYW5kbGVXaGVlbCwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gQWRkIHRvdWNoIGV2ZW50cyBmb3IgbW9iaWxlXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgaGFuZGxlVG91Y2hTdGFydCwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgaGFuZGxlVG91Y2hNb3ZlLCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIGhhbmRsZVRvdWNoRW5kLCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBJbml0aWFsIHJvdGF0aW9uIHNvIEVhcnRoIGlzIHZpc2libGVcbiAgICAgICAgcGxhbmV0LnJvdGF0aW9uLnkgPSAwLjU7XG4gICAgICAgIGF0bW9zcGhlcmUucm90YXRpb24ueSA9IDAuNTtcbiAgICAgICAgXG4gICAgICAgIC8vIFNldCBpbml0aWFsIHBsYW5ldCBwb3NpdGlvblxuICAgICAgICBwbGFuZXQucG9zaXRpb24uc2V0KDIwLCAwLCAzMCk7XG4gICAgICAgIGF0bW9zcGhlcmUucG9zaXRpb24uY29weShwbGFuZXQucG9zaXRpb24pO1xuICAgICAgICBcbiAgICAgICAgLy8gU3RhcnQgYW5pbWF0aW9uXG4gICAgICAgIGFuaW1hdGUoKTtcblxuICAgICAgICAvLyBDcmVhdGUgYW4gSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgdG8gcm90YXRlIHRoZSBwbGFuZXQgd2hlbiBwYWdlIHNlY3Rpb25zIGNvbWUgaW50byB2aWV3XG4gICAgICAgIC8vIFRoaXMgcHJvdmlkZXMgYSBiYWNrdXAgbWV0aG9kIGluIGNhc2Ugd2hlZWwgZXZlbnRzIGRvbid0IHdvcmsgd2VsbFxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNlY3Rpb25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc2VjdGlvbicpO1xuICAgICAgICAgICAgaWYgKHNlY3Rpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBsZXQgY3VycmVudFNlY3Rpb25JbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VjdGlvbk9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKChlbnRyaWVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIHNlY3Rpb24gaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWN0aW9uID0gZW50cnkudGFyZ2V0IGFzIEhUTUxFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gQXJyYXkuZnJvbShzZWN0aW9ucykuaW5kZXhPZihzZWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZXRlcm1pbmUgcm90YXRpb24gYmFzZWQgb24gc2VjdGlvbiBpbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVuc3VyZSB3ZSBvbmx5IHJvdGF0ZSBpZiB3ZSdyZSBtb3ZpbmcgdG8gYSBuZXcgc2VjdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gY3VycmVudFNlY3Rpb25JbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSb3RhdGUgMS80IHR1cm4gcGVyIHNlY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhbmV0LnJvdGF0aW9uLnkgPSBNYXRoLlBJIC8gMiAqIGluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdG1vc3BoZXJlLnJvdGF0aW9uLnkgPSBwbGFuZXQucm90YXRpb24ueTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFNlY3Rpb25JbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSwgeyB0aHJlc2hvbGQ6IDAuMyB9KTsgLy8gVHJpZ2dlciB3aGVuIDMwJSBvZiBzZWN0aW9uIGlzIHZpc2libGVcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBPYnNlcnZlIGFsbCBzZWN0aW9uc1xuICAgICAgICAgICAgICAgIHNlY3Rpb25zLmZvckVhY2goc2VjdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNlY3Rpb25PYnNlcnZlci5vYnNlcnZlKHNlY3Rpb24pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAxMDAwKTsgLy8gV2FpdCBmb3Igc2VjdGlvbnMgdG8gYmUgcmVhZHlcblxuICAgICAgICAvLyBDbGVhbnVwXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd3aGVlbCcsIGhhbmRsZVdoZWVsKTtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgaGFuZGxlVG91Y2hTdGFydCk7XG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgaGFuZGxlVG91Y2hNb3ZlKTtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIGhhbmRsZVRvdWNoRW5kKTtcbiAgICAgICAgICAgIGNvbnRhaW5lclJlZi5jdXJyZW50Py5yZW1vdmVDaGlsZChyZW5kZXJlci5kb21FbGVtZW50KTtcbiAgICAgICAgICAgIHJlbmRlcmVyLmRpc3Bvc2UoKTtcbiAgICAgICAgfTtcbiAgICB9LCBbXSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IFxuICAgICAgICAgICAgcmVmPXtjb250YWluZXJSZWZ9IFxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIHpJbmRleDogMVxuICAgICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICApO1xufSAiXSwibmFtZXMiOlsidXNlRWZmZWN0IiwidXNlUmVmIiwiVEhSRUUiLCJQbGFuZXRTY2VuZSIsImNvbnRhaW5lclJlZiIsImN1cnJlbnQiLCJzY2VuZSIsIlNjZW5lIiwiZm9nIiwiRm9nRXhwMiIsImNhbWVyYSIsIlBlcnNwZWN0aXZlQ2FtZXJhIiwid2luZG93IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwicmVuZGVyZXIiLCJXZWJHTFJlbmRlcmVyIiwiYW50aWFsaWFzIiwiYWxwaGEiLCJzZXRTaXplIiwic2V0Q2xlYXJDb2xvciIsInRvbmVNYXBwaW5nIiwiQUNFU0ZpbG1pY1RvbmVNYXBwaW5nIiwidG9uZU1hcHBpbmdFeHBvc3VyZSIsImFwcGVuZENoaWxkIiwiZG9tRWxlbWVudCIsImFtYmllbnRMaWdodCIsIkFtYmllbnRMaWdodCIsImFkZCIsInBvaW50TGlnaHQiLCJQb2ludExpZ2h0IiwicG9zaXRpb24iLCJzZXQiLCJwb2ludExpZ2h0MiIsImNyZWF0ZVN0YXJGaWVsZCIsInN0YXJDb3VudCIsImdlb21ldHJ5IiwiQnVmZmVyR2VvbWV0cnkiLCJwb3NpdGlvbnMiLCJGbG9hdDMyQXJyYXkiLCJpIiwiTWF0aCIsInJhbmRvbSIsInNldEF0dHJpYnV0ZSIsIkJ1ZmZlckF0dHJpYnV0ZSIsIm1hdGVyaWFsIiwiUG9pbnRzTWF0ZXJpYWwiLCJjb2xvciIsInNpemUiLCJ0cmFuc3BhcmVudCIsIm9wYWNpdHkiLCJzdGFycyIsIlBvaW50cyIsInN0YXJHcm91cHMiLCJwbGFuZXRHZW9tZXRyeSIsIlNwaGVyZUdlb21ldHJ5IiwicGxhbmV0TWF0ZXJpYWwiLCJNZXNoUGhvbmdNYXRlcmlhbCIsIm1hcCIsIlRleHR1cmVMb2FkZXIiLCJsb2FkIiwiYnVtcE1hcCIsImJ1bXBTY2FsZSIsInNwZWN1bGFyTWFwIiwic3BlY3VsYXIiLCJDb2xvciIsInNoaW5pbmVzcyIsInBsYW5ldCIsIk1lc2giLCJhdG1vc3BoZXJlR2VvbWV0cnkiLCJhdG1vc3BoZXJlTWF0ZXJpYWwiLCJTaGFkZXJNYXRlcmlhbCIsInNpZGUiLCJCYWNrU2lkZSIsInZlcnRleFNoYWRlciIsImZyYWdtZW50U2hhZGVyIiwiYXRtb3NwaGVyZSIsImxvb2tBdCIsIlZlY3RvcjMiLCJ0YXJnZXRYIiwidGFyZ2V0WiIsImludGVycG9sYXRpb25TcGVlZCIsImFuaW1hdGUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjdXJyZW50WCIsIngiLCJjdXJyZW50WiIsInoiLCJhYnMiLCJjb3B5IiwiZm9yRWFjaCIsInJvdGF0aW9uIiwieSIsInJlbmRlciIsImhhbmRsZVdoZWVsIiwiZXZlbnQiLCJkZWx0YSIsImRlbHRhWSIsInpEZWx0YSIsIm1heCIsIm1pbiIsInRvdWNoU3RhcnRZIiwiaGFuZGxlVG91Y2hTdGFydCIsInRvdWNoZXMiLCJjbGllbnRZIiwiaGFuZGxlVG91Y2hNb3ZlIiwidG91Y2hEZWx0YSIsImhhbmRsZVRvdWNoRW5kIiwiaGFuZGxlU2Nyb2xsIiwic2Nyb2xsSGVpZ2h0IiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJzY3JvbGxUb3AiLCJzY3JvbGxZIiwic2Nyb2xsUGVyY2VudCIsInhQb3MiLCJ4U2Nyb2xsUGVyY2VudCIsImhhbmRsZVJlc2l6ZSIsImFzcGVjdCIsInVwZGF0ZVByb2plY3Rpb25NYXRyaXgiLCJhZGRFdmVudExpc3RlbmVyIiwicGFzc2l2ZSIsInNldFRpbWVvdXQiLCJzZWN0aW9ucyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJsZW5ndGgiLCJjdXJyZW50U2VjdGlvbkluZGV4Iiwic2VjdGlvbk9ic2VydmVyIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJlbnRyaWVzIiwiZW50cnkiLCJpc0ludGVyc2VjdGluZyIsInNlY3Rpb24iLCJ0YXJnZXQiLCJpbmRleCIsIkFycmF5IiwiZnJvbSIsImluZGV4T2YiLCJQSSIsInRocmVzaG9sZCIsIm9ic2VydmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlQ2hpbGQiLCJkaXNwb3NlIiwiZGl2IiwicmVmIiwic3R5bGUiLCJ0b3AiLCJsZWZ0Iiwid2lkdGgiLCJoZWlnaHQiLCJ6SW5kZXgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/PlanetScene.tsx\n"));

/***/ })

});